Импортируем необходимые библиотеки, включая asyncio для работы с асинхронным кодом, json для обработки JSON данных, datetime для работы с датой и временем, typing для аннотирования типов, logging для записи логов, os для взаимодействия с операционной системой, а также concurrent.futures для работы с потоками. Особенное внимание уделяется импорту psycopg2 для работы с PostgreSQL, где предусмотрена обработка ошибок при его отсутствии, что позволяет вывести сообщение об установке пакета.

Загружаем переменные окружения из файла .env, если не находимся в продакшене, что позволяет конфигурировать приложение после развертывания. Устанавливается базовый уровень логирования, что помогает отслеживать события и ошибки в приложении, улучшая его поддержку.

Определяем экзекутор ThreadPoolExecutor с максимальным количеством потоков равным четырем, что даёт возможность выполнять несколько блокирующих операций параллельно, улучшая производительность взаимодействия с базой данных.

Создаём класс Database, который будет представлять базу данных и взаимодействие с ней. Инициализатор класса создает переменные для подключения к базе данных и экзекутора.

Метод build_dsn_from_env формирует строку подключения к PostgreSQL из переменных окружения, что позволяет избежать жесткого кодирования настройки базы данных. Выбраны ключи из переменных окружения, и при их отсутствии выбрасывается исключение, что предотвращает запуск приложения с неправильными настройками.

Метод init_db инициализирует соединение с базой данных, проверяет, используем ли мы продакшен, и логирует результат подключения. Это важно, чтобы подтвердить, что приложение успешно соединено с базой данных и может выполнять необходимые операции.

Метод create_tables создает таблицы в базе данных. Внутри вызывается вспомогательная функция, которая инициирует соединение с базой данных и создает необходимые таблицы для хранения информации о пользователях, бизнесах, снимках бизнеса и сессиях разговора. Это критически важно для обеспечения структурированного хранения данных.

Методы для работы с бизнесами, такие как create_business, get_user_businesses и add_business_snapshot, предоставляют функционал для создания нового бизнеса, получения списка бизнесов пользователя и добавления снимка текущего состояния бизнеса с метриками. Это позволяет пользователям вести учёт и анализировать свои бизнес-процессы.

Методы управления сессиями разговоров, такие как create_conversation_session и update_session_state, обеспечивают функционал для создания и обновления сессий, что необходимо для диалогового взаимодействия с пользователем и сбора данных.

Методы для взаимодействия с сообщениями, включая log_message и get_user_recent_messages, позволяют сохранять и извлекать сообщения из сеансов разговоров. Это важно для восстановления контекста диалогов и обеспечения поддержки пользователей.

Методы, такие как get_system_stats и get_advice, предоставляют системную статистику и общие советы на основе данных, что может быть полезно как для пользователей, так и для аналитики общей работы системы.

В конце создается глобальный экземпляр класса Database, который будет использоваться для выполнения операций с базой данных на протяжении всего приложения. Это позволяет избежать многократных инициализаций и обеспечивает единый интерфейс для работы с данными.