import logging
from typing import Dict, List, Optional
from database import db
from metrics_calculator import metrics_calculator

logger = logging.getLogger(__name__)

class BusinessAnalyzer:
    """
    –ï–¥–∏–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è Telegram –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–∞–π—Ç–∞
    """
    
    def __init__(self):
        self.calculator = metrics_calculator
    
    async def analyze_business_data(self, raw_data: Dict, user_id: str, business_id: int = None) -> Dict:
        """
        –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –±–∏–∑–Ω–µ—Å–∞ —Å 22 –º–µ—Ç—Ä–∏–∫–∞–º–∏
        """
        try:
            # –ï–°–õ–ò –ù–ï–¢ business_id - –°–û–ó–î–ê–ï–ú –ù–û–í–´–ô –ë–ò–ó–ù–ï–°!
            if not business_id:
                business_name = raw_data.get('business_name', '–û—Å–Ω–æ–≤–Ω–æ–π –±–∏–∑–Ω–µ—Å')
                business_id = await db.create_business(user_id, business_name)
                logger.info(f"üÜï –°–æ–∑–¥–∞–Ω –±–∏–∑–Ω–µ—Å: {business_id}")

            # 1. –†–∞—Å—á–µ—Ç –≤—Å–µ—Ö 22 –º–µ—Ç—Ä–∏–∫
            previous_data = await self._get_previous_business_data(business_id)
            metrics = self.calculator.calculate_all_metrics(raw_data, previous_data)
            
            # 2. –ë–∞–∑–æ–≤—ã–π AI-–∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
            ai_description = self._format_data_for_ai(raw_data)
            ai_basic_analysis = await self._get_basic_ai_analysis(ai_description, user_id)
            
            # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            snapshot_id = await db.add_business_snapshot(business_id, raw_data, metrics)
            logger.info(f"‚úÖ –°–Ω–∏–º–æ–∫ –±–∏–∑–Ω–µ—Å–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {snapshot_id}")
            
            # 4. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            response = self._format_analysis_response(raw_data, metrics, ai_basic_analysis)
            
            return response
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–∏–∑–Ω–µ—Å–∞: {e}")
            return {'error': str(e)}
    
    async def _get_previous_business_data(self, business_id: int) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–æ—Å—Ç–∞"""
        if not business_id:
            return None
            
        try:
            history = await db.get_business_history(business_id, limit=2)
            if len(history) > 1:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–Ω–µ–ø—à–æ—Ç –∫–∞–∫ —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
                prev_snapshot = history[1]
                return {
                    'revenue': prev_snapshot.get('revenue', 0),
                    'expenses': prev_snapshot.get('expenses', 0),
                    'profit': prev_snapshot.get('profit', 0),
                    'clients': prev_snapshot.get('clients', 0),
                    'average_check': prev_snapshot.get('average_check', 0),
                    'investments': prev_snapshot.get('investments', 0),
                    'marketing_costs': prev_snapshot.get('marketing_costs', 0)
                }
            return None
        except:
            return None
    
    async def _get_basic_ai_analysis(self, description: str, user_id: str) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ AI-–∞–Ω–∞–ª–∏–∑–∞ - —Ç–æ–ª—å–∫–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        """
        try:
            from ai import general_chat
            
            # –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
            prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –±–∏–∑–Ω–µ—Å –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
            
            {description}
            
            –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
            –öO–ú–ú–ï–ù–¢–ê–†–ò–ô: [tek—Å—Ç]
            –°–û–í–ï–¢1: [—Å–æ–≤–µ—Ç]
            –°–û–í–ï–¢2: [—Å–æ–≤–µ—Ç] 
            –°–û–í–ï–¢3: [—Å–æ–≤–µ—Ç]
            –°–û–í–ï–¢4: [—Å–æ–≤–µ—Ç]
            """
            
            response = await general_chat(prompt, user_id)
            
            # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
            result = {'–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô': '', '–°–û–í–ï–¢–´': []}
            
            if '–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô:' in response:
                parts = response.split('–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô:')
                if len(parts) > 1:
                    comment_part = parts[1].split('–°–û–í–ï–¢')[0] if '–°–û–í–ï–¢' in parts[1] else parts[1]
                    result['–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô'] = comment_part.strip()
            
            # –ò—â–µ–º —Å–æ–≤–µ—Ç—ã
            import re
            # –ò—â–µ–º –º–µ—Ç–∫–∏ –≤–∏–¥–∞ "–°–û–í–ï–¢1:", "–°–û–í–ï–¢ 2 -", –∏ —Ç.–ø.
            advice_pattern = r"–°–û–í–ï–¢\s*\d*\s*[:\-]\s*(.+?)(?=\n\s*–°–û–í–ï–¢|\Z)"
            matches = re.findall(advice_pattern, response, re.IGNORECASE | re.DOTALL)
            result['–°–û–í–ï–¢–´'] = [match.strip() for match in matches[:4]]
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–æ–≤, –∏—â–µ–º –ø—Ä–æ—Å—Ç–æ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏
            if not result['–°–û–í–ï–¢–´']:
                lines = response.split('\n')
                for line in lines:
                    if line.strip().startswith(('1.', '2.', '3.', '‚Ä¢', '-')):
                        result['–°–û–í–ï–¢–´'].append(line.strip().lstrip('123.- ').strip())
                    if len(result['–°–û–í–ï–¢–´']) >= 4:
                        break
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ AI-–∞–Ω–∞–ª–∏–∑–∞: {e}")
            return {'–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô': '–ê–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ', '–°–û–í–ï–¢–´': []}
    
    def _format_data_for_ai(self, raw_data: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞"""
        parts = []
        
        if raw_data.get('business_name'):
            parts.append(f"–ë–∏–∑–Ω–µ—Å: {raw_data['business_name']}")
        if raw_data.get('revenue'):
            parts.append(f"–≤—ã—Ä—É—á–∫–∞ {raw_data['revenue']:,.0f} —Ä—É–±")
        if raw_data.get('expenses'):
            parts.append(f"—Ä–∞—Å—Ö–æ–¥—ã {raw_data['expenses']:,.0f} —Ä—É–±")
        if raw_data.get('profit'):
            parts.append(f"–ø—Ä–∏–±—ã–ª—å {raw_data['profit']:,.0f} —Ä—É–±")
        if raw_data.get('clients'):
            parts.append(f"–∫–ª–∏–µ–Ω—Ç–æ–≤ {raw_data['clients']:,.0f}")
        if raw_data.get('average_check'):
            parts.append(f"—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ {raw_data['average_check']:,.0f} —Ä—É–±")
        if raw_data.get('investments'):
            parts.append(f"–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ {raw_data['investments']:,.0f} —Ä—É–±")
        if raw_data.get('marketing_costs'):
            parts.append(f"–º–∞—Ä–∫–µ—Ç–∏–Ω–≥ {raw_data['marketing_costs']:,.0f} —Ä—É–±")
        
        return ", ".join(parts)
    
    def _format_analysis_response(self, raw_data: Dict, metrics: Dict, ai_analysis: Dict) -> Dict:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –±–æ—Ç–∞"""
        
        health_assessment = self.calculator.get_health_assessment(
            metrics.get('overall_health_score', 0)
        )
        
        response = {
            'health_score': metrics.get('overall_health_score', 0),
            'health_assessment': health_assessment,
            'key_metrics': self._extract_key_metrics(metrics),
            'ai_commentary': ai_analysis.get('–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô', ''),
            'ai_advice': ai_analysis.get('–°–û–í–ï–¢–´', []),
            'detailed_metrics': metrics
        }
        
        return response
    
    def _extract_key_metrics(self, metrics: Dict) -> Dict:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return {
            'profit_margin': metrics.get('profit_margin', 0),
            'roi': metrics.get('roi', 0),
            'ltv_cac_ratio': metrics.get('ltv_cac_ratio', 0),
            'safety_margin': metrics.get('safety_margin', 0),
            'revenue_growth_rate': metrics.get('revenue_growth_rate', 0),
            'months_to_bankruptcy': metrics.get('months_to_bankruptcy', 0)
        }
    
    async def get_business_metrics(self, business_id: int, period: str = 'all') -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –±–∏–∑–Ω–µ—Å–∞ –¥–ª—è –≤–µ–±-—Å–∞–π—Ç–∞
        """
        try:
            history = await db.get_business_history(business_id)
            
            if not history:
                return {'error': '–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥
            aggregated_data = self._aggregate_period_data(history, period)
            
            # –†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤
            trends = self._calculate_trends(history)
            
            return {
                'business_id': business_id,
                'period': period,
                'current_metrics': history[0] if history else {},
                'history': history,
                'trends': trends,
                'aggregated_data': aggregated_data
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")
            return {'error': str(e)}
    
    async def generate_business_report(self, business_id: int) -> Dict:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞
        """
        try:
            history = await db.get_business_history(business_id)
            
            if not history:
                return {'error': '–ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}
            
            current_data = history[0]
            metrics = current_data  # –í –∏—Å—Ç–æ—Ä–∏–∏ —É–∂–µ –µ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            
            # Health assessment
            health_assessment = self.calculator.get_health_assessment(
                metrics.get('overall_health_score', 0)
            )
            
            # Benchmark report
            benchmark_report = self.calculator.generate_benchmark_report(
                metrics, 
                'other'  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ industry –≤ –±–∏–∑–Ω–µ—Å
            )
            
            # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            recommendations = self._generate_recommendations(metrics, health_assessment)
            
            return {
                'business_id': business_id,
                'health_score': metrics.get('overall_health_score', 0),
                'health_assessment': health_assessment,
                'key_metrics': self._extract_key_metrics(metrics),
                'all_metrics': metrics,
                'benchmark_report': benchmark_report,
                'recommendations': recommendations,
                'trends': self._calculate_trends(history)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            return {'error': str(e)}
    
    def _aggregate_period_data(self, history: List[Dict], period: str) -> Dict:
        """–ê–≥—Ä–µ–≥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–µ—Ä–∏–æ–¥"""
        if not history:
            return {}
        
        # –ü—Ä–æ—Å—Ç–∞—è –∞–≥—Ä–µ–≥–∞—Ü–∏—è - –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å
        return {
            'avg_revenue': sum(h.get('revenue', 0) for h in history) / len(history),
            'avg_profit': sum(h.get('profit', 0) for h in history) / len(history),
            'avg_health_score': sum(h.get('overall_health_score', 0) for h in history) / len(history),
            'period_count': len(history)
        }
    
    def _calculate_trends(self, history: List[Dict]) -> Dict:
        """–†–∞—Å—á–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        if len(history) < 2:
            return {'trend': 'stable', 'change': 0}
        
        current = history[0]
        previous = history[1]
        
        revenue_change = 0
        if previous.get('revenue', 0) > 0:
            revenue_change = ((current.get('revenue', 0) - previous.get('revenue', 0)) / previous.get('revenue', 0)) * 100
        
        health_change = current.get('overall_health_score', 0) - previous.get('overall_health_score', 0)
        
        return {
            'revenue_change': revenue_change,
            'health_change': health_change,
            'trend': 'up' if revenue_change > 5 else 'down' if revenue_change < -5 else 'stable'
        }
    
    def _generate_recommendations(self, metrics: Dict, health_assessment: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç—Ä–∏–∫"""
        recommendations = []
        
        profit_margin = metrics.get('profit_margin', 0)
        ltv_cac_ratio = metrics.get('ltv_cac_ratio', 0)
        safety_margin = metrics.get('safety_margin', 0)
        
        if profit_margin < 10:
            recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ —Å—á–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤")
        
        if ltv_cac_ratio < 2:
            recommendations.append("–£–ª—É—á—à–∏—Ç—å LTV/CAC ratio: —Å–Ω–∏–∑–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
        
        if safety_margin < 20:
            recommendations.append("–£–≤–µ–ª–∏—á–∏—Ç—å –∑–∞–ø–∞—Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤")
        
        if health_assessment['level'] == 'critical':
            recommendations.append("–°–†–û–ß–ù–û: –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞–Ω —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –æ–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏—è")
        
        return recommendations[:5]  # –ù–µ –±–æ–ª–µ–µ 5 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
business_analyzer = BusinessAnalyzer()