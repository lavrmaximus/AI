#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î
"""

import os
import asyncio
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv
from datetime import datetime, timedelta

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def build_dsn_from_env():
    """–°—Ç—Ä–æ–∏–º DSN –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if os.getenv("DATABASE_URL"):
        return os.getenv("DATABASE_URL")
    
    # –ò–ª–∏ –∏–∑ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    host = os.getenv("PGHOST", "localhost")
    port = os.getenv("PGPORT", "5432")
    database = os.getenv("PGDATABASE", "postgres")
    user = os.getenv("PGUSER", "postgres")
    password = os.getenv("PGPASSWORD", "")
    
    return f"postgresql://{user}:{password}@{host}:{port}/{database}"

async def test_messages():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î"""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ë–î...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        dsn = build_dsn_from_env()
        conn = psycopg2.connect(dsn, cursor_factory=RealDictCursor)
        conn.autocommit = True
        cursor = conn.cursor()
        
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã messages
        print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã messages:")
        cursor.execute('''
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'messages' 
            ORDER BY ordinal_position
        ''')
        columns = cursor.fetchall()
        for col in columns:
            print(f"  - {col['column_name']}: {col['data_type']} ({'NULL' if col['is_nullable'] == 'YES' else 'NOT NULL'})")
        
        # 2. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        cursor.execute("SELECT COUNT(*) as total FROM messages")
        total_messages = cursor.fetchone()['total']
        print(f"\nüìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ë–î: {total_messages}")
        
        # 3. –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
        print("\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π:")
        cursor.execute('''
            SELECT user_id, user_message, bot_response, message_type, created_at
            FROM messages 
            ORDER BY created_at DESC 
            LIMIT 10
        ''')
        messages = cursor.fetchall()
        
        if messages:
            for i, msg in enumerate(messages, 1):
                print(f"\n{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {msg['user_id']}")
                print(f"   –í—Ä–µ–º—è: {msg['created_at']}")
                print(f"   –¢–∏–ø: {msg['message_type']}")
                print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {msg['user_message'][:100]}{'...' if len(msg['user_message']) > 100 else ''}")
                if msg['bot_response']:
                    print(f"   –û—Ç–≤–µ—Ç: {msg['bot_response'][:100]}{'...' if len(msg['bot_response']) > 100 else ''}")
        else:
            print("‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
        
        # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π
        print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —Å–æ–æ–±—â–µ–Ω–∏–π:")
        cursor.execute('''
            SELECT message_type, COUNT(*) as count 
            FROM messages 
            GROUP BY message_type 
            ORDER BY count DESC
        ''')
        stats = cursor.fetchall()
        for stat in stats:
            print(f"  - {stat['message_type']}: {stat['count']} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        print("\nüë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
        cursor.execute('''
            SELECT user_id, COUNT(*) as count 
            FROM messages 
            GROUP BY user_id 
            ORDER BY count DESC 
            LIMIT 5
        ''')
        users = cursor.fetchall()
        for user in users:
            print(f"  - {user['user_id']}: {user['count']} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        print("\n‚è∞ –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å:")
        cursor.execute('''
            SELECT user_id, user_message, message_type, created_at
            FROM messages 
            WHERE created_at > NOW() - INTERVAL '1 hour'
            ORDER BY created_at DESC
        ''')
        recent_messages = cursor.fetchall()
        
        if recent_messages:
            for msg in recent_messages:
                print(f"  - {msg['created_at']} | {msg['user_id']} | {msg['message_type']} | {msg['user_message'][:50]}...")
        else:
            print("  ‚ùå –°–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        cursor.close()
        conn.close()
        
        print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False
    
    return True

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("=" * 40)
    
    success = asyncio.run(test_messages())
    
    if success:
        print("\n‚úÖ –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–∞–º–∏!")
