import g4f
import os
import threading
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor

class CodeDocumenter:
    def __init__(self):
        self.prompt = """
–û–ø–∏—à–∏ —Ñ–∞–π–ª –≥–æ–ª—ã–º —Ç–µ–∫—Å—Ç–æ–º –±–µ–∑ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏, –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, —Å–ø–∏—Å–∫–æ–≤ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏–π. 
–û–ø–∏—Å—ã–≤–∞–π –∫–∞–∂–¥—É—é –≤–∞–∂–Ω—É—é —á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–º –∞–±–∑–∞—Ü–µ–º: —Ñ—É–Ω–∫—Ü–∏–∏, –∫–ª–∞—Å—Å—ã, –æ—Å–Ω–æ–≤–Ω—ã–µ –±–ª–æ–∫–∏ –ª–æ–≥–∏–∫–∏. 
–î–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ —É–∫–∞–∂–∏ –µ—ë –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, —á—Ç–æ –æ–Ω–∞ –¥–µ–ª–∞–µ—Ç –∏ –ø–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ. 
–¢–æ–ª—å–∫–æ —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.
–í–æ—Ç –ø—Ä–∏–º–µ—Ä:
```
–§—É–Ω–∫—Ü–∏—è safe_markdown_text –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞ –≤ Telegram —Å MarkdownV2 —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º. –°–Ω–∞—á–∞–ª–∞ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã Markdown (–∑–≤–µ–∑–¥–æ—á–∫–∏, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è, —Å–∫–æ–±–∫–∏), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞, –∞ –∑–∞—Ç–µ–º –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∑–≤–µ–∑–¥–æ—á–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞. –≠—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –±–æ—Ç–µ.
```
–∏ —Ç–∞–∫ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–µ—Å—å –∫–æ–¥ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∞–±–∑–∞—Ü—ã.
        """
        self.report_dir = f"reports/{datetime.now().strftime('%d.%m.%Y %H-%M')}"
        os.makedirs(self.report_dir, exist_ok=True)
        
    def document_file(self, file_path):
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                code = f.read()
            
            response = g4f.ChatCompletion.create(
                model=g4f.models.gpt_4,
                messages=[
                    {"role": "user", "content": f"{self.prompt}:\n```python\n{code}\n```"}
                ],
                stream=False
            )
            
            filename = os.path.basename(file_path).replace('.py', '.txt')
            report_path = f"{self.report_dir}/{filename}"
            
            with open(report_path, 'w', encoding='utf-8') as f:
                f.write(response)
                
            print(f"‚úÖ {file_path} -> {report_path}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ {file_path}: {e}")

def main():
    documenter = CodeDocumenter()
    py_files = [f for f in os.listdir('.') if f.endswith('.py') and f != 'AUTO.py']
    
    if not py_files:
        print("‚ùå –ù–µ—Ç .py —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    print(f"üìÅ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {len(py_files)} —Ñ–∞–π–ª–æ–≤...")
    
    with ThreadPoolExecutor(max_workers=20) as executor:
        executor.map(documenter.document_file, py_files)
    
    print("üéØ –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!")

if __name__ == "__main__":
    main()