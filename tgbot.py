from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from ai import classify_message_type, general_chat, answer_question, extract_business_data, conversation_memory
from conversation_manager import conv_manager
from business_analyzer import business_analyzer
from database import db
from metrics_help import get_categories_keyboard, get_metrics_keyboard, get_metric_description, get_category_description
import logging
from logging.handlers import TimedRotatingFileHandler
from datetime import datetime
import asyncio
from typing import Dict, List
from datetime import datetime
from telegram.helpers import escape_markdown
from env_utils import is_production, get_log_dir, should_create_files
from report_formatter import format_business_report, get_health_assessment
import sys

logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)

import os
BASE_DIR = os.path.dirname(os.path.abspath(__file__))

if should_create_files():
    LOG_DIR = get_log_dir() or os.path.join(BASE_DIR, 'logs')
    os.makedirs(LOG_DIR, exist_ok=True)
else:
    LOG_DIR = None

class DailyFileHandler(logging.Handler):
    def __init__(self, log_dir: str):
        super().__init__()
        self.log_dir = log_dir
        self.current_date = None
        self.file_handler = None
        self._ensure_file()

    def _ensure_file(self):
        date_str = datetime.now().strftime('%Y-%m-%d')
        if date_str != self.current_date:
            if self.file_handler:
                try:
                    self.file_handler.close()
                except Exception:
                    pass
            self.current_date = date_str
            path = os.path.join(self.log_dir, f'{date_str}.log')
            self.file_handler = logging.FileHandler(path, encoding='utf-8')
            self.file_handler.setFormatter(logging.Formatter('[%(asctime)s] %(name)s - %(levelname)s - %(message)s', datefmt='%H:%M:%S'))

    def emit(self, record: logging.LogRecord):
        try:
            self._ensure_file()
            self.file_handler.emit(record)
        except Exception:
            pass

handlers = []

stream_handler = logging.StreamHandler(sys.stdout)
stream_handler.setFormatter(logging.Formatter('[%(asctime)s] %(name)s - %(levelname)s - %(message)s', datefmt='%Y-%m-%d %H:%M:%S'))
handlers.append(stream_handler)

if should_create_files() and LOG_DIR:
    file_handler = DailyFileHandler(LOG_DIR)
    handlers.append(file_handler)

logging.basicConfig(
    level=logging.INFO,
    handlers=handlers,
    force=True
)
logger = logging.getLogger(__name__)

ADMINS = [
    "1287604685",
]

def safe_markdown_text(text: str) -> str:
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    """
    safe_text = escape_markdown(text, version=2)
    safe_text = safe_text.replace(r'\*', '*')
    return safe_text

def clean_ai_text(text: str) -> str:
    """
    –û—á–∏—Å—Ç–∫–∞ AI-—Ç–µ–∫—Å—Ç–∞ –æ—Ç Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    import re
    
    text = re.sub(r'^#{1,6}\s*', '', text, flags=re.MULTILINE)
    text = re.sub(r'\*\*([^*]+)\*\*', r'\1', text)
    text = re.sub(r'__([^_]+)__', r'\1', text)
    text = re.sub(r'(?<!_)_([^_]+)_(?!_)', r'\1', text)
    text = re.sub(r'(?<!\*)\*([^*]+)\*(?!\*)', r'\1', text)
    text = re.sub(r'`([^`]+)`', r'\1', text)
    text = re.sub(r'\\\[', '[', text)
    text = re.sub(r'\\\]', ']', text)
    
    return text
    
print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞....")

class BusinessBot:
    def __init__(self):
        token = (
            os.getenv("BOT_TOKEN")
            or os.getenv("TELEGRAM_BOT_TOKEN")
            or os.getenv("TOKEN")
        )
        if not token:
            raise ValueError("BOT_TOKEN environment variable is required (try BOT_TOKEN or TELEGRAM_BOT_TOKEN)")
        
        self.app = Application.builder().token(token).concurrent_updates(True).build()
        self.setup_handlers()

    def setup_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("guide", self.guide_command))
        self.app.add_handler(CommandHandler("about", self.about_command))
        self.app.add_handler(CommandHandler("history", self.history_command))
        self.app.add_handler(CommandHandler("help_metrics", self.help_metrics_command))
        self.app.add_handler(CommandHandler("new_business", self.new_business_command))
        self.app.add_handler(CommandHandler("edit_business", self.edit_business_command))
        self.app.add_handler(CommandHandler("delete_business", self.delete_business_command))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        self.app.add_handler(CallbackQueryHandler(self.handle_inline_buttons))
        self.app.add_error_handler(self.on_error)

    async def on_error(self, update: object, context: ContextTypes.DEFAULT_TYPE):
        try:
            err_text = str(context.error)
        except Exception:
            err_text = "unknown"
        logger.error(f"Update error: {err_text}")

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = str(user.id)

        await db.save_user(user_id, user.username, user.first_name, user.last_name)

        text = safe_markdown_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø *–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –õ—É—á* - –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π AI-–∞–Ω–∞–ª–∏—Ç–∏–∫ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞! üí∞\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
            "‚Ä¢ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞\n"
            "‚Ä¢ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n"
            "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Ä–∞–∑–≤–∏—Ç–∏—è\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ, –∏ —è –ø—Ä–æ–≤–µ–¥—É –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑! üìä\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /guide - —Ç–∞–º –µ—Å—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à –±–∏–∑–Ω–µ—Å!\n"
            "–ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥: /help"
        )

        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def help_metrics_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º"""
        try:
            user_id = str(update.effective_user.id)
            await db.save_user(
                user_id=user_id,
                username=update.effective_user.username or "",
                first_name=update.effective_user.first_name or "",
                last_name=update.effective_user.last_name or ""
            )
            
            message = "üìö **–°–ü–†–ê–í–û–ß–ù–ò–ö –ü–û –ë–ò–ó–ù–ï–°-–ú–ï–¢–†–ò–ö–ê–ú**\n\n"
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è:\n\n"
            message += "‚Ä¢ **üí∞ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å** - –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏\n"
            message += "‚Ä¢ **üìà –†–æ—Å—Ç** - –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞\n"
            message += "‚Ä¢ **üë• –ö–ª–∏–µ–Ω—Ç—ã** - –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n"
            message += "‚Ä¢ **üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - –º–µ—Ç—Ä–∏–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏\n"
            message += "‚Ä¢ **üè• –ó–¥–æ—Ä–æ–≤—å–µ** - –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–∏–∑–Ω–µ—Å–∞"
            
            keyboard = get_categories_keyboard()
            await update.message.reply_text(
                safe_markdown_text(message),
                parse_mode='MarkdownV2',
                reply_markup=keyboard
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã help_metrics: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞.")

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")

        text = safe_markdown_text(
            "*üìã –î–û–°–¢–£–ü–ù–´–ï –ö–û–ú–ê–ù–î–´*\n\n"
            "*–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/about - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ\n"
            "/guide - –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏\n\n"
            "*–†–∞–±–æ—Ç–∞ —Å –±–∏–∑–Ω–µ—Å–æ–º:*\n"
            "/new_business - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –±–∏–∑–Ω–µ—Å üÜï\n"
            "/edit_business - —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–∏–∑–Ω–µ—Å ‚úèÔ∏è\n"
            "/delete_business - —É–¥–∞–ª–∏—Ç—å –±–∏–∑–Ω–µ—Å üóëÔ∏è\n"
            "/history - –∏—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ üìä\n\n"
            "*–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∏:*\n"
            "/help_metrics - —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º üìö\n\n"
            "*–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*\n"
            "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º\n"
            "2. –ò–ò –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≤–ª–µ—á–µ—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            "3. –ü–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏\n\n"
            "*–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:*\n"
            "‚Ä¢ \"–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å?\"\n"
            "‚Ä¢ \"–ö–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è –º–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞?\"\n"
            "‚Ä¢ \"–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–∫—É –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏?\"\n\n"
            "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /guide –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤!"
        )
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def guide_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        user = update.effective_user
        logger.info(f"üìñ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ")

        text = safe_markdown_text(
            "*üìñ –†–£–ö–û–í–û–î–°–¢–í–û –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ*\n\n"
            "*–ö–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø–∏—Å–∞—Ç—å –≤–∞—à –±–∏–∑–Ω–µ—Å:*\n\n"
            "*–ü—Ä–∏–º–µ—Ä 1 - –ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:*\n"
            "\"–ú–æ–π –±–∏–∑–Ω–µ—Å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è '–ö–æ—Ñ–µ–π–Ω—è –Ω–∞ —É–≥–ª—É'. –í—ã—Ä—É—á–∫–∞ 500000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü, —Ä–∞—Å—Ö–æ–¥—ã 300000 —Ä—É–±–ª–µ–π. –£ –º–µ–Ω—è 150 –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ 3300 —Ä—É–±–ª–µ–π. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ —Å–æ—Å—Ç–∞–≤–∏–ª–∏ 2000000 —Ä—É–±–ª–µ–π. –ù–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ —Ç—Ä–∞—á—É 50000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü. –£ –º–µ–Ω—è —Ä–∞–±–æ—Ç–∞–µ—Ç 5 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤. –ö–∞–∂–¥—ã–π –º–µ—Å—è—Ü –ø—Ä–∏—Ö–æ–¥–∏—Ç 20 –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤, —É–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤ 80%.\"\n\n"
            "*–ü—Ä–∏–º–µ—Ä 2 - –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:*\n"
            "\"–ö–∞—Ñ–µ: –≤—ã—Ä—É—á–∫–∞ 300–∫, —Ä–∞—Å—Ö–æ–¥—ã 200–∫, 100 –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ 3–∫, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ 1–º–ª–Ω, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ 30–∫, 3 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.\"\n\n"
            "*–ü—Ä–∏–º–µ—Ä 3 - –¢–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:*\n"
            "\"–ú–∞–≥–∞–∑–∏–Ω –æ–¥–µ–∂–¥—ã: –¥–æ—Ö–æ–¥—ã 800000, —Ç—Ä–∞—Ç—ã 500000, –∫–ª–∏–µ–Ω—Ç–æ–≤ 200, —á–µ–∫ 4000.\"\n\n"
            "*–ß—Ç–æ –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å:*\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞\n"
            "‚Ä¢ –í—ã—Ä—É—á–∫—É/–¥–æ—Ö–æ–¥—ã\n"
            "‚Ä¢ –†–∞—Å—Ö–æ–¥—ã/—Ç—Ä–∞—Ç—ã\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫\n"
            "‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
            "‚Ä¢ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –º–µ—Å—è—Ü\n"
            "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
            "*üí° –°–æ–≤–µ—Ç:* –ß–µ–º –±–æ–ª—å—à–µ –¥–∞–Ω–Ω—ã—Ö –≤—ã —É–∫–∞–∂–µ—Ç–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç –∞–Ω–∞–ª–∏–∑!\n\n"
            "*–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:*\n"
            "‚Ä¢ –ü–æ–ª–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑\n"
            "‚Ä¢ 22 –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏\n"
            "‚Ä¢ –û—Ü–µ–Ω–∫—É –∑–¥–æ—Ä–æ–≤—å—è –±–∏–∑–Ω–µ—Å–∞\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "üöÄ *–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ!*"
        )
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def about_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")

        main_text = safe_markdown_text(
            "*üí∏ –§–ò–ù–ê–ù–°–û–í–´–ô –õ–£–ß üí∏*\n\n"
            "*–û –ø—Ä–æ–µ–∫—Ç–µ:*\n"
            "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –õ—É—á - —ç—Ç–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–æ–º, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–æ–µ–∫—Ç–∞ \"–ò–Ω–∂–µ–Ω–µ—Ä—ã –±—É–¥—É—â–µ–≥–æ\".\n\n"
            "*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ –£–º–Ω—ã–π –¥–∏–∞–ª–æ–≥ —Å –ò–ò –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –†–∞—Å—á–µ—Ç 22 –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫\n"
            "‚Ä¢ Business Health Score - –æ—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –±–∏–∑–Ω–µ—Å–∞\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è\n"
            "‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –º–µ—Ç—Ä–∏–∫–∞–º\n\n"
            "*–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:*\n"
            "‚Ä¢ GPT-4 –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞\n"
            "‚Ä¢ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª—ã\n"
            "‚Ä¢ PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ø–æ–º–æ—â—å\n"
            "/guide - –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
            "/new_business - –Ω–æ–≤—ã–π –±–∏–∑–Ω–µ—Å\n"
            "/history - –∏—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤\n"
            "/help_metrics - —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–µ—Ç—Ä–∏–∫\n\n"
            "üöÄ *–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞!*"
        )
        
        license_text = ">–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ª—É—á ¬© 2025 by Lavrinov Maxim is licensed under CC BY\\-NC 4\\.0\\. To view a copy of this license, visit https://creativecommons\\.org/licenses/by\\-nc/4\\.0/"
        
        text = main_text + "\n\n" + license_text
        await update.message.reply_text(text, parse_mode='MarkdownV2')

    async def new_business_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - —Å–æ–∑–¥–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞ —Å —É–º–Ω—ã–º –¥–∏–∞–ª–æ–≥–æ–º"""
        user = update.effective_user
        user_id = str(user.id)

        logger.info(f"üÜï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –±–∏–∑–Ω–µ—Å")

        text = safe_markdown_text(
            "*üÜï –°–û–ó–î–ê–ù–ò–ï –ù–û–í–û–ì–û –ë–ò–ó–ù–ï–°–ê*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!\n\n"
            "*–ß—Ç–æ –º–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å:*\n"
            "‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞\n"
            "‚Ä¢ –í—ã—Ä—É—á–∫—É/–¥–æ—Ö–æ–¥—ã\n"
            "‚Ä¢ –†–∞—Å—Ö–æ–¥—ã/—Ç—Ä–∞—Ç—ã\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫\n"
            "‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
            "‚Ä¢ –ó–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
            "‚Ä¢ –ù–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –º–µ—Å—è—Ü\n"
            "‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É–¥–µ—Ä–∂–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
            "*–ü—Ä–∏–º–µ—Ä:*\n"
            "\"–ú–æ–π –±–∏–∑–Ω–µ—Å '–ö–æ—Ñ–µ–π–Ω—è –Ω–∞ —É–≥–ª—É': –≤—ã—Ä—É—á–∫–∞ 500000 —Ä—É–±–ª–µ–π –≤ –º–µ—Å—è—Ü, —Ä–∞—Å—Ö–æ–¥—ã 300000, 150 –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ 3300, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ 2000000, –º–∞—Ä–∫–µ—Ç–∏–Ω–≥ 50000, 5 —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, 20 –Ω–æ–≤—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ –º–µ—Å—è—Ü, —É–¥–µ—Ä–∂–∞–Ω–∏–µ 80%.\"\n\n"
            "üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /guide –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤!\n\n"
            "üìù *–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ:*"
        )
        
        await update.message.reply_text(text, parse_mode='MarkdownV2')
        
        # –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥: —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–∞–∫ —Å–≤–æ–±–æ–¥–Ω—ã–π –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö
        if not hasattr(self, 'awaiting_business_data'):
            self.awaiting_business_data = set()
        self.awaiting_business_data.add(user_id)

    async def edit_business_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞"""
        user = update.effective_user
        user_id = str(user.id)

        logger.info(f"‚úèÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} —Ö–æ—á–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å")

        try:
            businesses = await db.get_user_businesses(user_id)

            if not businesses:
                await update.message.reply_text(
                    safe_markdown_text("üìù *–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è*\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å —Å –ø–æ–º–æ—â—å—é /new_business!"),
                    parse_mode='MarkdownV2'
                )
                return

            keyboard = []
            for i, business in enumerate(businesses[:10], 1):
                business_name = business.get('business_name', f'–ë–∏–∑–Ω–µ—Å #{i}')
                business_id = business.get('business_id')
                keyboard.append([
                    InlineKeyboardButton(f"‚úèÔ∏è {business_name}", callback_data=f'edit_{business_id}'),
                    InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{business_id}')
                ])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                safe_markdown_text("‚úèÔ∏è *–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ë–ò–ó–ù–ï–°–ê*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:"),
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∏–∑–Ω–µ—Å–æ–≤: {e}")
            await update.message.reply_text(
                safe_markdown_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –±–∏–∑–Ω–µ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."),
                parse_mode='MarkdownV2'
            )

    async def delete_business_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞ (–º—è–≥–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ)"""
        user = update.effective_user
        user_id = str(user.id)

        logger.info(f"üóë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} —Ö–æ—á–µ—Ç —É–¥–∞–ª–∏—Ç—å –±–∏–∑–Ω–µ—Å")

        try:
            businesses = await db.get_user_businesses(user_id)

            if not businesses:
                await update.message.reply_text(
                    safe_markdown_text("üìù *–£ –≤–∞—Å –Ω–µ—Ç –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è*\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å —Å –ø–æ–º–æ—â—å—é /new_business!"),
                    parse_mode='MarkdownV2'
                )
                return

            keyboard = []
            for i, business in enumerate(businesses[:10], 1):
                business_name = business.get('business_name', f'–ë–∏–∑–Ω–µ—Å #{i}')
                business_id = business.get('business_id')
                keyboard.append([InlineKeyboardButton(f"üóë –£–¥–∞–ª–∏—Ç—å {business_name}", callback_data=f'delete_{business_id}')])

            await update.message.reply_text(
                safe_markdown_text("üóë *–£–î–ê–õ–ï–ù–ò–ï –ë–ò–ó–ù–ï–°–ê*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"),
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –±–∏–∑–Ω–µ—Å–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                safe_markdown_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."),
                parse_mode='MarkdownV2'
            )

    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = str(user.id)

        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é")

        try:
            businesses = await db.get_user_businesses(user_id)
            if not businesses:
                await update.message.reply_text(
                    safe_markdown_text("üìù *–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –ø—É—Å—Ç–∞*\n\n"
                    "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å —Å –ø–æ–º–æ—â—å—é /new_business!"),
                    parse_mode='MarkdownV2'
                )
                return
            keyboard = []
            for i, business in enumerate(businesses[:10], 1):
                business_name = business.get('business_name', f'–ë–∏–∑–Ω–µ—Å #{i}')
                business_id = business.get('business_id')
                try:
                    history = await db.get_business_history(business_id, limit=1)
                    if history:
                        health_score = history[0].get('overall_health_score', 0)
                        button_text = f"üìä {business_name} (Health: {health_score}/100)"
                    else:
                        button_text = f"üìä {business_name}"
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Health Score –¥–ª—è –±–∏–∑–Ω–µ—Å–∞ {business_id}: {e}")
                    button_text = f"üìä {business_name}"
                keyboard.append([InlineKeyboardButton(button_text, callback_data=f'business_{business_id}')])

            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                safe_markdown_text("üìä *–í–ê–®–ò –ë–ò–ó–ù–ï–°–´*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –±–∏–∑–Ω–µ—Å –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:"),
                reply_markup=reply_markup,
                parse_mode='MarkdownV2'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await update.message.reply_text(
                safe_markdown_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."),
                parse_mode='MarkdownV2'
            )

    async def handle_inline_buttons(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()

        if query.data.startswith('business_'):
            business_id = int(query.data.split('_')[1])
            await self.show_business_details(query, business_id)
        elif query.data.startswith('edit_'):
            business_id = int(query.data.split('_')[1])
            await self.start_edit_business(query, business_id)
        elif query.data.startswith('delete_confirm_'):
            business_id = int(query.data.split('_')[2])
            await self.delete_business_confirmed(query, business_id)
        elif query.data.startswith('delete_'):
            business_id = int(query.data.split('_')[1])
            await self.confirm_delete_business(query, business_id)
        elif query.data.startswith('metrics_cat_'):
            category_id = query.data.replace('metrics_cat_', '')
            await self.show_metrics_category(query, category_id)
        elif query.data.startswith('metrics_detail_'):
            metric_id = query.data.replace('metrics_detail_', '')
            await self.show_metric_detail(query, metric_id)
        elif query.data == 'metrics_back':
            await self.show_metrics_categories(query)
        elif query.data == 'metrics_close':
            await query.edit_message_text("üìö –°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –∑–∞–∫—Ä—ã—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help_metrics –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è.")

    async def show_metrics_categories(self, query: CallbackQuery):
        """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Ç—Ä–∏–∫"""
        try:
            message = "üìö **–°–ü–†–ê–í–û–ß–ù–ò–ö –ü–û –ë–ò–ó–ù–ï–°-–ú–ï–¢–†–ò–ö–ê–ú**\n\n"
            message += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∏–∑—É—á–µ–Ω–∏—è:\n\n"
            message += "‚Ä¢ **üí∞ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å** - –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏\n"
            message += "‚Ä¢ **üìà –†–æ—Å—Ç** - –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –±–∏–∑–Ω–µ—Å–∞\n"
            message += "‚Ä¢ **üë• –ö–ª–∏–µ–Ω—Ç—ã** - –º–µ—Ç—Ä–∏–∫–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏\n"
            message += "‚Ä¢ **üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** - –º–µ—Ç—Ä–∏–∫–∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏\n"
            message += "‚Ä¢ **üè• –ó–¥–æ—Ä–æ–≤—å–µ** - –æ–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–∏–∑–Ω–µ—Å–∞"
            
            keyboard = get_categories_keyboard()
            await query.edit_message_text(
                safe_markdown_text(message),
                parse_mode='MarkdownV2',
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –º–µ—Ç—Ä–∏–∫: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")

    async def show_metrics_category(self, query: CallbackQuery, category_id: str):
        """–ü–æ–∫–∞–∑ –º–µ—Ç—Ä–∏–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        try:
            description = get_category_description(category_id)
            keyboard = get_metrics_keyboard(category_id)
            
            if keyboard is None:
                await query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return

            await query.edit_message_text(
                safe_markdown_text(description),
                parse_mode='MarkdownV2',
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–µ—Ç—Ä–∏–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ—Ç—Ä–∏–∫.")

    async def show_metric_detail(self, query: CallbackQuery, metric_id: str):
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏"""
        try:
            description = get_metric_description(metric_id)
            
            keyboard = InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="metrics_back")
            ]])
            
            await query.edit_message_text(
                safe_markdown_text(description),
                parse_mode='MarkdownV2',
                reply_markup=keyboard
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –º–µ—Ç—Ä–∏–∫–∏: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–ø–∏—Å–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏.")

    async def show_business_details(self, query: CallbackQuery, business_id: int):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –±–∏–∑–Ω–µ—Å–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É Inline –∫–Ω–æ–ø–∫–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = await db.get_business_history(business_id, limit=1)
            if not history:
                await query.edit_message_text("‚ùå –ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            current_data = history[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
            report = await business_analyzer.generate_business_report(business_id)
            metrics = report.get('detailed_metrics', {}) if 'error' not in report else {}
            recommendations = report.get('recommendations', []) if 'error' not in report else {}
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, –∞ –Ω–µ –∏–∑ –æ—Ç—á–µ—Ç–∞
            raw_data = current_data
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
            response = format_business_report(raw_data, metrics, recommendations)

            # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
            await query.edit_message_text("üìä *–î–µ–ª–∞—é –æ—Ç—á–µ—Ç\\.\\.\\.*", parse_mode='MarkdownV2')
            await self.send_long_message(query, response, parse_mode='MarkdownV2')
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ó–∞–≥—Ä—É–∂–∞—é –æ—Ç—á–µ—Ç"
            try:
                await query.delete_message()
            except Exception:
                pass

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –±–∏–∑–Ω–µ—Å–∞: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π.")

    async def start_edit_business(self, query: CallbackQuery, business_id: int):
        """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞"""
        try:
            user_id = str(query.from_user.id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∏–∑–Ω–µ—Å–µ
            history = await db.get_business_history(business_id, limit=1)
            if not history:
                await query.edit_message_text("‚ùå –ë–∏–∑–Ω–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            current_data = history[0]
            business_name = current_data.get('business_name', f'–ë–∏–∑–Ω–µ—Å #{business_id}')
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            conversation = await conv_manager.get_conversation(user_id)
            conversation.business_id = business_id
            conversation.collected_data = {
                'business_name': business_name,
                'revenue': current_data.get('revenue', 0),
                'expenses': current_data.get('expenses', 0),
                'profit': current_data.get('profit', 0),
                'clients': current_data.get('clients', 0),
                'average_check': current_data.get('average_check', 0),
                'investments': current_data.get('investments', 0),
                'marketing_costs': current_data.get('marketing_costs', 0),
                'employees': current_data.get('employees', 0),
                'new_clients_per_month': current_data.get('new_clients_per_month', 0),
                'customer_retention_rate': current_data.get('customer_retention_rate', 0)
            }
            
            await conversation._update_state(conversation.STATES['COLLECTING_DATA'])
            
            # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            report = await business_analyzer.generate_business_report(business_id)
            metrics = report.get('detailed_metrics', {}) if 'error' not in report else {}
            recommendations = report.get('recommendations', []) if 'error' not in report else []
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞
            response = f"‚úèÔ∏è *–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï: {business_name}*\n\n"
            response += format_business_report(current_data, metrics, recommendations)
            response += f"\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.\n\n"
            response += f"–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—ã–π—Ç–∏'"
            
            await query.edit_message_text(safe_markdown_text(response), parse_mode='MarkdownV2')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")

    async def confirm_delete_business(self, query: CallbackQuery, business_id: int):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞"""
        try:
            keyboard = [
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f'delete_confirm_{business_id}')],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f'business_{business_id}')]
            ]
            await query.edit_message_text(
                safe_markdown_text("‚ö†Ô∏è *–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–∏–∑–Ω–µ—Å?*\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."),
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è.")

    async def delete_business_confirmed(self, query: CallbackQuery, business_id: int):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º—è–≥–∫–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞"""
        try:
            user_id = str(query.from_user.id)
            await db.soft_delete_business(user_id, business_id)
            await query.edit_message_text("‚úÖ –ë–∏–∑–Ω–µ—Å –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ —É–¥–∞–ª—ë–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞: {e}")
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–∏–∑–Ω–µ—Å.")

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_text = update.message.text
        user = update.effective_user
        user_id = str(user.id)

        logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user_id}): {user_text}")

        await db.save_user(user_id, user.username, user.first_name, user.last_name)

        # –ï—Å–ª–∏ –∂–¥—ë–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ ‚Äì —Å—Ä–∞–∑—É —Å–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–µ–∑ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞
        if hasattr(self, 'awaiting_business_data') and user_id in self.awaiting_business_data:
            try:
                conversation = await conv_manager.get_conversation(user_id)
                await conversation._update_state(conversation.STATES['COLLECTING_DATA'])
                progress_msg = None
                try:
                    progress_msg = await update.message.reply_text(
                        "üõ† *–î–µ–ª–∞—é –æ—Ç—á—ë—Ç\\.\\.\\.*",
                        parse_mode='MarkdownV2'
                    )
                except Exception:
                    pass
                response_data = await conversation._handle_data_collection(user_text)
                if progress_msg:
                    try:
                        await progress_msg.edit_text(
                            safe_markdown_text(response_data['response']),
                            parse_mode='MarkdownV2'
                        )
                    except Exception:
                        try:
                            await progress_msg.delete()
                        except Exception:
                            pass
                        await self.send_long_message(update, response_data['response'], 'Markdown')
                else:
                    await self.send_long_message(update, response_data['response'], 'Markdown')
            finally:
                self.awaiting_business_data.discard(user_id)
            return

        try:
            from ai import conversation_memory as ai_memory
            if user_id not in ai_memory or len(ai_memory[user_id]) == 0:
                recent = await db.get_user_recent_messages(user_id, limit=20)
                history = []
                for msg in recent:
                    if msg.get('user_message'):
                        history.append({"role": "user", "content": msg['user_message']})
                    if msg.get('bot_response'):
                        history.append({"role": "assistant", "content": msg['bot_response']})
                if history:
                    ai_memory[user_id] = history[-12:]
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≥–∏–¥—Ä–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î: {e}")

        if user_id in conv_manager.active_sessions:
            await self._handle_conversation_message(update, user_id, user_text)
            return

        if user_text.startswith('/'):
            return

        thinking_msg = await update.message.reply_text(
            safe_markdown_text("ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ...*"),
            parse_mode='MarkdownV2'
        )

        try:
            message_type = await classify_message_type(user_text)
            logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")

            if message_type == "business_data":
                try:
                    await update.message.reply_text(
                        "‚ÑπÔ∏è –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –±–∏–∑–Ω–µ—Å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /new_business"
                    )
                except Exception:
                    pass
                message_type = "general"

            if message_type == "general":
                import asyncio
                await asyncio.sleep(0.1)
                try:
                    await thinking_msg.edit_text(
                        "üí¨ *–û–±—â–∞—é—Å—å\\.\\.\\.*\n_–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–±–æ–ª—Ç–∞—Ç—å_",
                        parse_mode='MarkdownV2'
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ '–æ–±—â–∞—é—Å—å': {e}")
            elif message_type == "question":
                try:
                    await thinking_msg.edit_text(
                        "üí≠ *–û–±–¥—É–º—ã–≤–∞—é –æ—Ç–≤–µ—Ç\\.\\.\\.*\n_–ò—â—É –ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞_",
                        parse_mode='MarkdownV2'
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞ '–æ–±–¥—É–º—ã–≤–∞—é': {e}")

            if message_type == "question":
                response = await self.handle_question(user_text, user_id)
                try:
                    session_id = None if user_id not in conv_manager.active_sessions else conv_manager.active_sessions[user_id].session_id
                    if session_id is None:
                        session_id = await db.get_or_create_user_chat_session(user_id)
                    await db.log_message(
                        user_id=user_id,
                        session_id=session_id,
                        user_message=user_text,
                        bot_response=response,
                        message_type='question'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ –ë–î: {e}")
                await self.send_long_message(update, response)
            else:
                response = await self.handle_general_chat(user_text, user_id)
                try:
                    session_id = None if user_id not in conv_manager.active_sessions else conv_manager.active_sessions[user_id].session_id
                    if session_id is None:
                        session_id = await db.get_or_create_user_chat_session(user_id)
                    await db.log_message(
                        user_id=user_id,
                        session_id=session_id,
                        user_message=user_text,
                        bot_response=response,
                        message_type='general'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –≤ –ë–î: {e}")
                await self.send_long_message(update, response, None)
            
            try:
                await thinking_msg.delete()
            except Exception:
                pass

            logger.info(f"ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞ ({message_type}): {response[:20]}...")

        except Exception as e:
            error_msg = safe_markdown_text("‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞*. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await thinking_msg.edit_text(error_msg, parse_mode='MarkdownV2')


    def get_thinking_message(self, message_type: str) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        messages = {
            "question": "üí≠ *–û–±–¥—É–º—ã–≤–∞—é –æ—Ç–≤–µ—Ç...*\n_–ò—â—É –ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞_",
            "general": "üí¨ *–û–±—â–∞—é—Å—å...*\n_–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–±–æ–ª—Ç–∞—Ç—å_"
        }
        return messages.get(message_type, "ü§î *–î—É–º–∞—é...*")


    async def _handle_conversation_message(self, update: Update, user_id: str, user_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞–º–∫–∞—Ö –∞–∫—Ç–∏–≤–Ω–æ–π –¥–∏–∞–ª–æ–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        try:
            conversation = conv_manager.active_sessions[user_id]

            # –ü—Ä–æ–≥—Ä–µ—Å—Å –°–†–ê–ó–£ –ø–æ—Å–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            progress_msg = None
            try:
                progress_msg = await update.message.reply_text(
                    "üõ† *–î–µ–ª–∞—é –æ—Ç—á—ë—Ç\\.\\.\\.*",
                    parse_mode='MarkdownV2'
                )
            except Exception:
                pass

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response_data = await conversation.process_message(user_text)

            # –ó–∞–º–µ–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if progress_msg:
                try:
                    # –ü—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await progress_msg.edit_text(
                        safe_markdown_text(response_data['response']),
                        parse_mode='MarkdownV2'
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
                    try:
                        # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å, —É–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-—Å–æ–æ–±—â–µ–Ω–∏–µ
                        await progress_msg.delete()
                    except Exception:
                        pass
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.send_long_message(update, response_data['response'], 'Markdown')
            else:
                await self.send_long_message(update, response_data['response'], 'Markdown')
            
            try:
                await db.log_message(
                    user_id=user_id,
                    session_id=conversation.session_id,
                    user_message=user_text,
                    bot_response=response_data['response'],
                    message_type='conversation'
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î: {e}")

            # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
            if response_data.get('is_complete', False):
                # –ï—Å–ª–∏ –∞–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω conversation_manager-–æ–º (–æ–±—ã—á–Ω–æ —Ç–∞–∫ –∏ –µ—Å—Ç—å)
                if response_data.get('next_action') == 'analysis_complete':
                    pass

                # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
                conv_manager.end_conversation(user_id)
                logger.info(f"‚úÖ –î–∏–∞–ª–æ–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –¥–∏–∞–ª–æ–≥–µ. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ /new_business.",
                parse_mode='Markdown'
            )
            conv_manager.end_conversation(user_id)

    async def handle_question(self, text: str, user_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
        answer = await answer_question(text, user_id)
        return clean_ai_text(answer)

    async def handle_general_chat(self, text: str, user_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ —á–∞—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç."""
        response = await general_chat(text, user_id)
        return clean_ai_text(response)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
    async def send_long_message(self, update_or_query_object, text: str, parse_mode: str = None):
        """
        –≠–ª–µ–≥–∞–Ω—Ç–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞.
        –ü—Ä–∏–Ω–∏–º–∞–µ—Ç update –∏–ª–∏ query –æ–±—ä–µ–∫—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.
        """
        MAX_LENGTH = 3800
        final_text_to_send = safe_markdown_text(text) if parse_mode == 'MarkdownV2' else text

        if len(final_text_to_send) <= MAX_LENGTH:
            if hasattr(update_or_query_object, 'message'):
                await update_or_query_object.message.reply_text(final_text_to_send, parse_mode=parse_mode)
            else:
                await update_or_query_object.edit_message_text(final_text_to_send, parse_mode=parse_mode)
            return

        parts = self.split_message_smart(final_text_to_send, MAX_LENGTH)

        for i, part in enumerate(parts):
            prefix = ""
            if len(parts) > 1:
                prefix = f"üìÑ ({i+1}/{len(parts)})\n\n" # –≠—Ç–æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å —Ç–æ–∂–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å markdown —Å–∏–º–≤–æ–ª—ã

            current_part_to_send = prefix + part

            try:
                # –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å MarkdownV2
                safe_text = safe_markdown_text(current_part_to_send)
                if hasattr(update_or_query_object, 'message'):
                    await update_or_query_object.message.reply_text(safe_text, parse_mode='MarkdownV2')
                else:
                    if i == 0:
                        await update_or_query_object.edit_message_text(safe_text, parse_mode='MarkdownV2')
                    else:
                        user_id = update_or_query_object.from_user.id
                        await self.app.bot.send_message(chat_id=user_id, text=safe_text, parse_mode='MarkdownV2')

                if i < len(parts) - 1:
                    await asyncio.sleep(0.7)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —á–∞—Å—Ç–∏ {i+1}: {e}. –¢–µ–∫—Å—Ç: {current_part_to_send[:200]}...")
                # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑ MarkdownV2 (–µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞)
                try:
                    if hasattr(update_or_query_object, 'message'):
                        await update_or_query_object.message.reply_text(f"–ß–∞—Å—Ç—å {i+1} (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):\n{part}")
                    else:
                        user_id = update_or_query_object.from_user.id
                        await self.app.bot.send_message(chat_id=user_id, text=f"–ß–∞—Å—Ç—å {i+1} (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):\n{part}")
                except Exception as e2:
                    logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e2}")


    async def start_business_dialog(self, update: Update, user_id: str, business_text: str):
        """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∏–∑–Ω–µ—Å–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –¥–∏–∞–ª–æ–≥–∞
            conversation = await conv_manager.get_conversation(user_id)

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö
            # –ï—Å–ª–∏ –±–∏–∑–Ω–µ—Å_–Ω–µ–π–º –Ω–µ —É–∫–∞–∑–∞–Ω –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø–æ–ª–Ω–∏—Ç–µ–ª—å
            extracted_data = await extract_business_data(business_text)
            business_name = extracted_data.get('business_name', '–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π –±–∏–∑–Ω–µ—Å')

            await conversation.initialize(user_id) # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            conversation.collected_data = extracted_data # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            conversation.collected_data['business_name'] = business_name
            conversation.business_id = await db.create_business(user_id, business_name) # –°–æ–∑–¥–∞–µ–º –±–∏–∑–Ω–µ—Å –≤ –ë–î
            await conversation._update_state(conversation.STATES['COLLECTING_DATA']) # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
            response_data = await conversation.process_message(business_text)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º
            await self.send_long_message(update, response_data['response'], 'Markdown')

            # –ï—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à–µ–Ω
            if response_data.get('is_complete', False):
                conv_manager.end_conversation(user_id)
                logger.info(f"‚úÖ –î–∏–∞–ª–æ–≥–æ–≤–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞–≤—Ç–æ–¥–∏–∞–ª–æ–≥–µ: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_business",
                parse_mode='Markdown'
            )

    def split_message_smart(self, text: str, max_length: int) -> list:
        """
        –£–º–Ω–æ–µ —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —á–∞—Å—Ç–∏, —Å—Ç–∞—Ä–∞—è—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –∞–±–∑–∞—Ü–µ–≤.
        """
        if len(text) <= max_length:
            return [text]

        parts = []
        current_part 

        paragraphs = text.split('\n\n')

        for paragraph in paragraphs:
            if len(paragraph) > max_length:
                sentences = self.split_by_sentences(paragraph)
                for sentence in sentences:
                    if len(current_part) + len(sentence) + 2 <= max_length:
                        current_part += ("\n" if current_part else "") + sentence
                    else:
                        if current_part:
                            parts.append(current_part.strip())
                        current_part = sentence
            else:
                if len(current_part) + len(paragraph) + 4 <= max_length:
                    current_part += ("\n\n" if current_part else "") + paragraph
                else:
                    if current_part:
                        parts.append(current_part.strip())
                    current_part = paragraph

        if current_part:
            parts.append(current_part.strip())

        return parts

    def split_by_sentences(self, text: str) -> list:
        """
        –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
        """
        import re
        sentences = re.split(r'(?<=[.!?‚Ä¶])\s+|(?<=[.!?‚Ä¶]["\'])', text)
        return [s.strip() for s in sentences if s.strip()]

    def escape_markdown(self, text: str) -> str:
        """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã Markdown –¥–ª—è Telegram Bot API v2"""
        escape_chars = r'_*[]()~`>#+-=|{}.!'
        for char in escape_chars:
            text = text.replace(char, '\\' + char)
        return text

    async def run_async(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        print("Bot is starting...")

        import sqlite3
        import os

        db_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'business_bot_v2.db')
        db.conn = sqlite3.connect(db_path, check_same_thread=False)
        await db.init_db()

        await self.app.initialize()
        await self.app.start()
        await self.app.updater.start_polling()

        await asyncio.Event().wait()
