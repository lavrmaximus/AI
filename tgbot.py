from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from ai import *
import logging
from datetime import datetime

logging.getLogger('telegram').setLevel(logging.WARNING)
logging.getLogger('httpx').setLevel(logging.WARNING)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

BOT_TOKEN = "8350333926:AAEkf4If4LXh657SOTuGsAhEJx6EFSPKHbU"

print("Bot started")
class BusinessBot:
    def __init__(self):
        self.app = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        self.app.add_handler(CommandHandler("start", self.start_command))
        self.app.add_handler(CommandHandler("help", self.help_command))
        self.app.add_handler(CommandHandler("about", self.about_command))
        self.app.add_handler(CommandHandler("analysis", self.analysis_command))
        self.app.add_handler(CommandHandler("history", self.history_command))
        self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = str(user.id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
        logger.info(f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (ID: {user_id}, @{user.username})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        await db.save_user(user_id, user.username, user.first_name, user.last_name)
        
        await update.message.reply_text(
            f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã\n\n"
            "–Ø - —Ç–≤–æ–π –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI-–∞–Ω–∞–ª–∏—Ç–∏–∫! üöÄ\n\n"
            "üìä *–ß—Ç–æ —è —É–º–µ—é:*\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∏–∑–Ω–µ—Å —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ –±–∏–∑–Ω–µ—Å–µ\n"
            "‚Ä¢ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É\n\n"
            "üí° *–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏:*\n"
            "‚Ä¢ –û —Å–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ —Å —Ü–∏—Ñ—Ä–∞–º–∏\n"
            "‚Ä¢ –í–æ–ø—Ä–æ—Å –æ –±–∏–∑–Ω–µ—Å–µ\n"
            "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è!\n\n"
            "ü§ñ *–ù–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "/history - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤",
            parse_mode='Markdown'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        logger.info(f"‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
        
        help_text = (
            "üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
            "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/help - –ø–æ–º–æ—â—å\n"  
            "/about - –æ –ø—Ä–æ–µ–∫—Ç–µ\n"
            "/analysis - –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑\n"
            "/history - –∏—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤\n\n"
            "üí¨ *–£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤:*\n"
            "‚Ä¢ *–ë–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑:* '–í—ã—Ä—É—á–∫–∞ 500–∫, —Ä–∞—Å—Ö–æ–¥—ã 200–∫, 100 –∫–ª–∏–µ–Ω—Ç–æ–≤'\n"
            "‚Ä¢ *–í–æ–ø—Ä–æ—Å:* '–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å?'\n"
            "‚Ä¢ *–û–±—â–µ–Ω–∏–µ:* '–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?'\n\n"
            "üéØ –Ø —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—é —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!"
        )
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def about_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        logger.info(f"‚ÑπÔ∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
        
        about_text = (
            "ü§ñ *Business Intelligence AI Assistant*\n\n"
            "üìà *–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:*\n"
            "‚Ä¢ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ñ–æ—Ä–º—É–ª—ã –∏ –º–µ—Ç—Ä–∏–∫–∏\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è\n"  
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –†–∞—Å—á–µ—Ç —Ç–æ—á–∫–∏ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤ –ë–î\n\n"
            "üß† *–£–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã:*\n"
            "‚Ä¢ AI-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            "‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n\n"
            "üíæ *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:*\n"
            "‚Ä¢ PostgreSQL –Ω–∞ Render.com\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤\n"
            "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑–æ–≤\n\n"
            "üöÄ *–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ!*"
        )
        await update.message.reply_text(about_text, parse_mode='Markdown')
    
    async def analysis_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        logger.info(f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–ø—É—Å—Ç–∏–ª –∞–Ω–∞–ª–∏–∑")
        
        await update.message.reply_text(
            "üîç *–†–µ–∂–∏–º –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!*\n\n"
            "–†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ —Å —Ü–∏—Ñ—Ä–∞–º–∏:\n"
            "‚Ä¢ –í—ã—Ä—É—á–∫–∞ –∏ —Ä–∞—Å—Ö–æ–¥—ã\n"
            "‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤\n" 
            "‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n"
            "‚Ä¢ –õ—é–±—ã–µ –¥—Ä—É–≥–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏\n\n"
            "–Ø –ø—Ä–æ–≤–µ–¥—É –ø–æ–ª–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑!",
            parse_mode='Markdown'
        )
    
    async def history_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        user_id = str(user.id)
        
        logger.info(f"üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –∑–∞–ø—Ä–æ—Å–∏–ª –∏—Å—Ç–æ—Ä–∏—é")
        
        try:
            business_data = await db.get_user_business_data(user_id)
            
            if not business_data:
                await update.message.reply_text(
                    "üìù *–ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –ø—É—Å—Ç–∞*\n\n"
                    "–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑, –∏ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è!",
                    parse_mode='Markdown'
                )
                return
            
            response = "üìä *–ò–°–¢–û–†–ò–Ø –í–ê–®–ò–• –ê–ù–ê–õ–ò–ó–û–í*\n\n"
            
            for i, analysis in enumerate(business_data[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∞–Ω–∞–ª–∏–∑–æ–≤
                date = analysis['created_at'].strftime("%d.%m.%Y %H:%M") if hasattr(analysis['created_at'], 'strftime') else analysis['created_at']
                
                response += (
                    f"*–ê–Ω–∞–ª–∏–∑ #{i}* ({date})\n"
                    f"üí∞ –í—ã—Ä—É—á–∫–∞: {analysis['revenue']:,.0f} —Ä—É–±\n"
                    f"üìä –ü—Ä–∏–±—ã–ª—å: {analysis['profit']:,.0f} —Ä—É–±\n"
                    f"‚≠ê –û—Ü–µ–Ω–∫–∞: {analysis['rating']}/10\n"
                )
                
                if analysis['commentary']:
                    response += f"üí° {analysis['commentary'][:100]}...\n"
                
                response += "\n"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode='Markdown'
            )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_text = update.message.text
        user = update.effective_user
        user_id = str(user.id)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user.first_name} (ID: {user_id}): {user_text}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.save_user(user_id, user.username, user.first_name, user.last_name)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é AI
        thinking_msg = await update.message.reply_text(
            "ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ...*", 
            parse_mode='Markdown'
        )
        
        try:
            message_type = await classify_message_type(user_text)
            logger.info(f"üéØ –û–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è: {message_type}")
            
            await thinking_msg.edit_text(
                self.get_thinking_message(message_type), 
                parse_mode='Markdown'
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
            if message_type == "business_analysis":
                response = await self.handle_business_analysis(user_text, user_id)
            elif message_type == "question":
                response = await self.handle_question(user_text, user_id)
            else:
                response = await self.handle_general_chat(user_text, user_id)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–≤–µ—Ç –≤ –±–∞–∑—É
            await db.save_message(user_id, user_text, message_type, response)
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            logger.info(f"ü§ñ –û—Ç–≤–µ—Ç –±–æ—Ç–∞ ({message_type}): {response[:100]}...")
            
            await thinking_msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            error_msg = f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            
            await db.save_message(user_id, user_text, "error", error_msg)
            await thinking_msg.edit_text(error_msg, parse_mode='Markdown')
    
    def get_thinking_message(self, message_type: str) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        messages = {
            "business_analysis": "üîç *–ü—Ä–æ–≤–æ–∂—É —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑...*\n_–†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ñ–æ—Ä–º—É–ª—ã_",
            "question": "üí≠ *–û–±–¥—É–º—ã–≤–∞—é –æ—Ç–≤–µ—Ç...*\n_–ò—â—É –ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞_", 
            "general": "üí¨ *–û–±—â–∞—é—Å—å...*\n_–í—Å–µ–≥–¥–∞ —Ä–∞–¥ –ø–æ–±–æ–ª—Ç–∞—Ç—å_"
        }
        return messages.get(message_type, "ü§î *–î—É–º–∞—é...*")
    
    async def handle_business_analysis(self, text: str, user_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏–∑–∞ —Å —Ä–∞—Å—á–µ—Ç–æ–º —Ñ–æ—Ä–º—É–ª"""
        
        business_data = await analyze_business(text, user_id)
        print(f"üìä –î–∞–Ω–Ω—ã–µ –æ—Ç AI: {business_data}")  # –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        
        if "error" in business_data:
            return "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –±–∏–∑–Ω–µ—Å –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ."
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        calculated_metrics = calculate_advanced_metrics(business_data)
        print(f"üìà –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏: {calculated_metrics}")  # –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        enhanced_data = {**business_data, **calculated_metrics}
        
        return self.format_business_response(enhanced_data)
    
    async def handle_question(self, text: str, user_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        answer = await answer_question(text, user_id)
        return self.format_question_response(answer)
    
    async def handle_general_chat(self, text: str, user_id: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—â–µ–≥–æ —á–∞—Ç–∞"""
        response = await general_chat(text, user_id)
        return self.format_general_response(response)
    
    def format_business_response(self, data: dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        
        def clean_text(text):
            if not text:
                return ""
            return text.replace('###', '').replace('**', '').replace('__', '')
        
        rating_emoji = "üöÄ" if data["–û–¶–ï–ù–ö–ê"] >= 8 else "‚úÖ" if data["–û–¶–ï–ù–ö–ê"] >= 6 else "‚ö†Ô∏è"
        
        response = (
            f"üìä *–§–ò–ù–ê–ù–°–û–í–´–ô –ê–ù–ê–õ–ò–ó*\n\n"
            f"üí∞ *–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
            f"‚Ä¢ –í—ã—Ä—É—á–∫–∞: {data['–í–´–†–£–ß–ö–ê']:,.0f} —Ä—É–±\n"
            f"‚Ä¢ –†–∞—Å—Ö–æ–¥—ã: {data['–†–ê–°–•–û–î–´']:,.0f} —Ä—É–±\n"
            f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: {data['–ü–†–ò–ë–´–õ–¨']:,.0f} —Ä—É–±\n"
            f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç—ã: {data['–ö–õ–ò–ï–ù–¢–´']:,.0f} —á–µ–ª\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {data['–°–†–ï–î–ù–ò–ô_–ß–ï–ö']:,.0f} —Ä—É–±\n"
            f"‚Ä¢ –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: {data['–ò–ù–í–ï–°–¢–ò–¶–ò–ò']:,.0f} —Ä—É–±\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –†–ê–°–°–ß–ò–¢–ê–ù–ù–´–ï –º–µ—Ç—Ä–∏–∫–∏
        response += f"üìà *–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:*\n"
        
        if data.get("–†–û–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–¨", 0) > 0:
            rent_emoji = "‚úÖ" if data["–†–û–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–¨"] > 20 else "‚ö†Ô∏è" if data["–†–û–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–¨"] > 10 else "‚ùå"
            response += f"‚Ä¢ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {data['–†–û–ï–ù–¢–ê–ë–ï–õ–¨–ù–û–°–¢–¨']:.1f}% {rent_emoji}\n"
        
        if data.get("–¢–û–ß–ö–ê_–ë–ï–ó–£–ë–´–¢–û–ß–ù–û–°–¢–ò", 0) > 0:
            response += f"‚Ä¢ –¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏: {data['–¢–û–ß–ö–ê_–ë–ï–ó–£–ë–´–¢–û–ß–ù–û–°–¢–ò']:.0f} –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        
        if data.get("–ó–ê–ü–ê–°_–ü–†–û–ß–ù–û–°–¢–ò", 0) > 0:
            safety_emoji = "üõ°Ô∏è" if data["–ó–ê–ü–ê–°_–ü–†–û–ß–ù–û–°–¢–ò"] > 30 else "‚ö†Ô∏è"
            response += f"‚Ä¢ –ó–∞–ø–∞—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏: {data['–ó–ê–ü–ê–°_–ü–†–û–ß–ù–û–°–¢–ò']:.1f}% {safety_emoji}\n"
        
        if data.get("–ò–ù–î–ï–ö–°_–ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò", 0) > 0:
            pi_emoji = "üöÄ" if data["–ò–ù–î–ï–ö–°_–ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò"] > 1.5 else "‚úÖ" if data["–ò–ù–î–ï–ö–°_–ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò"] > 1.0 else "‚ö†Ô∏è"
            response += f"‚Ä¢ –ò–Ω–¥–µ–∫—Å –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏: {data['–ò–ù–î–ï–ö–°_–ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò']:.2f} {pi_emoji}\n"
        
        if data.get("SGR", 0) > 0:
            response += f"‚Ä¢ –ú–∞–∫—Å. —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–æ—Å—Ç: {data['SGR']:.1f}%\n"
        
        # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Å–æ–≤–µ—Ç—ã
        if data.get("–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô"):
            clean_comment = clean_text(data["–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô"])
            response += f"\nüí° *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∞:*\n{clean_comment}\n\n"
        
        if data.get("–°–û–í–ï–¢–´"):
            response += f"üéØ *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            for i, advice in enumerate(data["–°–û–í–ï–¢–´"][:3], 1):
                clean_advice = clean_text(advice)
                response += f"{i}. {clean_advice}\n"
        
        response += f"\n‚≠ê *–û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞:* {data['–û–¶–ï–ù–ö–ê']}/10 {rating_emoji}"
        
        return response
    
    def format_question_response(self, answer: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
        answer = answer.replace('*', '\\*').replace('_', '\\_').replace('`', '\\`')
        return f"üí° *–û–¢–í–ï–¢ –ù–ê –í–û–ü–†–û–°*\n\n{answer}"
    
    def format_general_response(self, response: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        return f"üí¨ {response}"
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("ü§ñ –£–º–Ω—ã–π –±–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        import asyncio
        asyncio.run(db.init_db())
        
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print("‚úÖ –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π")
        print("‚úÖ –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º–∏ —Ñ–æ—Ä–º—É–ª–∞–º–∏")
        print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π")
        print("‚úÖ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        self.app.run_polling()

if __name__ == "__main__":
    bot = BusinessBot()
    bot.run()
