"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –æ –±–∏–∑–Ω–µ—Å–µ
"""
from typing import Dict, List

def format_business_report(business_data: Dict, metrics: Dict = None, recommendations: List[str] = None) -> str:
    """–ï–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞ –æ –±–∏–∑–Ω–µ—Å–µ"""
    response = ""
    
    business_name = business_data.get('business_name', '–ë–∏–∑–Ω–µ—Å')
    response += f"üìä *–î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ë–ò–ó–ù–ï–°–ê: {business_name}*\n\n"
    
    if metrics:
        health_score = metrics.get('overall_health_score', 0)
        health_assessment = get_health_assessment(health_score)
        emoji = health_assessment.get('emoji', '‚ö™')
        response += f"üè• *–ë–ò–ó–ù–ï–°-–ó–î–û–†–û–í–¨–ï: {health_score}/100* {emoji}\n"
        response += f"*{health_assessment.get('message', '')}*\n\n"
    
    response += "üí∞ *–ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:*\n"
    if metrics:
        response += f"‚Ä¢ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {metrics.get('profit_margin', 0):.1f}%\n"
        response += f"‚Ä¢ ROI: {metrics.get('roi', 0):.1f}%\n"
        response += f"‚Ä¢ LTV/CAC: {metrics.get('ltv_cac_ratio', 0):.2f}\n"
        response += f"‚Ä¢ –ó–∞–ø–∞—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏: {metrics.get('safety_margin', 0):.1f}%\n"
        response += f"‚Ä¢ –¢–µ–º–ø —Ä–æ—Å—Ç–∞ –≤—ã—Ä—É—á–∫–∏: {metrics.get('revenue_growth_rate', 0):.1f}%\n"
        response += f"‚Ä¢ –î–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞: {metrics.get('months_to_bankruptcy', 0):.0f} –º–µ—Å\n\n"
    else:
        response += "‚Ä¢ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: _–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ_\n"
        response += "‚Ä¢ ROI: _–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ_\n"
        response += "‚Ä¢ LTV/CAC: _–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ_\n"
        response += "‚Ä¢ –ó–∞–ø–∞—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏: _–Ω–µ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ_\n\n"
    
    response += "üìä *–í–°–ï –ú–ï–¢–†–ò–ö–ò:*\n"
    
    # –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    raw_fields = {
        'revenue': 'üí∞ –í—ã—Ä—É—á–∫–∞',
        'expenses': 'üìä –†–∞—Å—Ö–æ–¥—ã', 
        'profit': 'üìà –ü—Ä–∏–±—ã–ª—å',
        'clients': 'üë• –ö–ª–∏–µ–Ω—Ç—ã',
        'average_check': 'üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
        'investments': 'üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
        'marketing_costs': 'üì¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
        'employees': 'üßë‚Äçü§ù‚Äçüßë –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
        'new_clients_per_month': 'üÜï –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã/–º–µ—Å',
        'customer_retention_rate': 'üîÑ –£–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤'
    }
    
    for field, name in raw_fields.items():
        value = business_data.get(field, 0)
        if value and value != 0:
            if field == 'customer_retention_rate':
                response += f"‚Ä¢ {name}: {value:.1f}%\n"
            elif field in ['clients', 'employees', 'new_clients_per_month']:
                response += f"‚Ä¢ {name}: {value:,.0f}\n"
            else:
                response += f"‚Ä¢ {name}: {value:,.0f} —Ä—É–±\n"
        else:
            response += f"‚Ä¢ {name}: _–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç_\n"
    
    # –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    if metrics:
        calculated_fields = {
            'profit_margin': '–†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å',
            'break_even_clients': '–¢–æ—á–∫–∞ –±–µ–∑—É–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏',
            'safety_margin': '–ó–∞–ø–∞—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏',
            'roi': 'ROI',
            'profitability_index': '–ò–Ω–¥–µ–∫—Å –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏',
            'ltv': 'LTV',
            'cac': 'CAC',
            'ltv_cac_ratio': 'LTV/CAC',
            'customer_profit_margin': '–ú–∞—Ä–∂–∞ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–∞',
            'sgr': 'SGR',
            'revenue_growth_rate': '–¢–µ–º–ø —Ä–æ—Å—Ç–∞ –≤—ã—Ä—É—á–∫–∏',
            'asset_turnover': '–û–±–æ—Ä–∞—á–∏–≤–∞–µ–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–æ–≤',
            'roe': 'ROE',
            'months_to_bankruptcy': '–î–æ –±–∞–Ω–∫—Ä–æ—Ç—Å—Ç–≤–∞',
            'financial_health_score': '–§–∏–Ω–∞–Ω—Å–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ',
            'growth_health_score': '–ó–¥–æ—Ä–æ–≤—å–µ —Ä–æ—Å—Ç–∞',
            'efficiency_health_score': '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å',
            'overall_health_score': '–û–±—â–µ–µ –∑–¥–æ—Ä–æ–≤—å–µ'
        }
        
        for field, name in calculated_fields.items():
            value = metrics.get(field, 0)
            if field in ['financial_health_score', 'growth_health_score', 'efficiency_health_score', 'overall_health_score']:
                response += f"‚Ä¢ {name}: {value:.0f}\n"
            elif field in ['months_to_bankruptcy']:
                response += f"‚Ä¢ {name}: {value:.0f} –º–µ—Å\n"
            elif field in ['profit_margin', 'safety_margin', 'roi', 'revenue_growth_rate', 'roe']:
                response += f"‚Ä¢ {name}: {value:.1f}%\n"
            else:
                response += f"‚Ä¢ {name}: {value:.2f}\n"
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if recommendations:
        response += "\nüéØ *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:*\n"
        for i, rec in enumerate(recommendations, 1):
            response += f"{i}. {rec}\n"
    
    return response

def get_health_assessment(score: int) -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –±–∏–∑–Ω–µ—Å–∞"""
    if score >= 90:
        return {'emoji': 'üü¢', 'message': '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!'}
    elif score >= 75:
        return {'emoji': 'üü°', 'message': '–•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ï—Å—Ç—å –∫—É–¥–∞ —Ä–∞—Å—Ç–∏!'}
    elif score >= 60:
        return {'emoji': 'üü†', 'message': '–°—Ä–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –¢—Ä–µ–±—É—é—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏—è.'}
    else:
        return {'emoji': 'üî¥', 'message': '–¢—Ä–µ–±—É—é—Ç—Å—è —Å—Ä–æ—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è!'}
