from flask import Flask, render_template, request, jsonify
import sqlite3
import json
from datetime import datetime, timedelta
import math
import asyncio
import os
import logging
import traceback
from dotenv import load_dotenv
from database import db as async_db
load_dotenv()

# –û—Ç–∫–ª—é—á–∞–µ–º –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–≤ Flask
logging.getLogger('werkzeug').setLevel(logging.WARNING)

app = Flask(__name__, template_folder='templates', static_folder='static')

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞–ø–æ–∫
import os
print(f"üåê –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
print(f"üåê –ü–∞–ø–∫–∞ templates —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists('templates')}")
print(f"üåê –ü–∞–ø–∫–∞ static —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.exists('static')}")
if os.path.exists('templates'):
    print(f"üåê –§–∞–π–ª—ã –≤ templates: {os.listdir('templates')}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤—É—é –ë–î (async) –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
_event_loop = asyncio.new_event_loop()
asyncio.set_event_loop(_event_loop)
try:
    _event_loop.run_until_complete(async_db.init_db())
except Exception as e:
    print(f"Database initialization error: {e}")

def await_db(coro):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å async-–≤—ã–∑–æ–≤ –∫ –ë–î –≤ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º Flask –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ."""
    return _event_loop.run_until_complete(coro)

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è 22+ –º–µ—Ç—Ä–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–Ω–∏–º–∫–æ–≤ –Ω–æ–≤–æ–π –ë–î
def prepare_multi_metric_data(snapshots):
    def get_sort_key(s):
        """–ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        dt = s.get('created_at')
        if dt:
            try:
                from datetime import datetime
                if isinstance(dt, str):
                    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ datetime –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                    if 'T' in dt:
                        return datetime.fromisoformat(dt.replace('Z', '+00:00'))
                    elif ':' in dt:
                        return datetime.strptime(dt, '%Y-%m-%d %H:%M:%S')
                    else:
                        return datetime.strptime(dt, '%Y-%m-%d')
                return dt
            except Exception:
                return datetime.min
        pd = s.get('period_date')
        if pd:
            try:
                return datetime.strptime(str(pd), '%Y-%m-%d')
            except:
                return datetime.min
        return datetime.min
    
    # –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é
    snapshots_sorted = sorted(snapshots, key=get_sort_key)
    
    def fmt_dt(s):
        dt = s.get('created_at')
        if dt:
            try:
                from datetime import datetime
                if isinstance(dt, str):
                    # –û—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Ä–µ–º—è
                    return dt if (':' in dt) else dt + ' 00:00'
                # datetime -> —Å—Ç—Ä–æ–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º
                return dt.strftime('%Y-%m-%d %H:%M')
            except Exception:
                return str(dt)
        pd = s.get('period_date')
        return pd if isinstance(pd, str) else str(pd)
    dates = [fmt_dt(s) for s in snapshots_sorted]
    metric_keys = [
        'revenue', 'expenses', 'profit', 'clients', 'average_check', 'investments', 'marketing_costs', 'employees',
        'profit_margin', 'break_even_clients', 'safety_margin', 'roi', 'profitability_index',
        'ltv', 'cac', 'ltv_cac_ratio', 'customer_profit_margin', 'sgr', 'revenue_growth_rate',
        'asset_turnover', 'roe', 'months_to_bankruptcy',
        'financial_health_score', 'growth_health_score', 'efficiency_health_score', 'overall_health_score'
    ]
    series = {k: [float(s.get(k) or 0) for s in snapshots_sorted] for k in metric_keys}
    return {'dates': dates, 'series': series}

def get_data_summary(chart_data):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –ø–æ –¥–∞–Ω–Ω—ã–º"""
    if not chart_data or not chart_data['revenue']:
        return {}
    
    revenue = chart_data['revenue']
    expenses = chart_data['expenses']
    profit = chart_data['profit']
    
    return {
        'total_revenue': sum(revenue),
        'total_expenses': sum(expenses),
        'total_profit': sum(profit),
        'avg_revenue': sum(revenue) / len(revenue) if revenue else 0,
        'data_points': len(chart_data['dates'])
    }

def get_period_info(dates):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–µ—Ä–∏–æ–¥–µ"""
    if not dates:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    if len(dates) == 1:
        return dates[0]
    else:
        return f"{dates[-1]} - {dates[0]}"

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def index():
    try:
        print("üåê –ó–∞–ø—Ä–æ—Å –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
        return render_template('index.html')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: {e}")
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        return f"–û—à–∏–±–∫–∞: {str(e)}", 500

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞
@app.route('/dashboard')
def dashboard():
    try:
        print("üåê –ó–∞–ø—Ä–æ—Å –∫ –¥–∞—à–±–æ—Ä–¥—É")
        return render_template('dashboard.html')
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞ –¥–∞—à–±–æ—Ä–¥–µ: {e}")
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        return f"–û—à–∏–±–∫–∞: {str(e)}", 500

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
@app.route('/analytics')
def analytics():
    return render_template('analytics.html')

# –ù–æ–≤—ã–π API: —Å–ø–∏—Å–æ–∫ –±–∏–∑–Ω–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@app.route('/api/businesses/<user_id>')
def get_businesses(user_id):
    try:
        businesses = await_db(async_db.get_user_businesses(user_id))
        return jsonify({'success': True, 'businesses': businesses})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

# –ù–æ–≤—ã–π API: –∏—Å—Ç–æ—Ä–∏—è —Å–Ω–∏–º–∫–æ–≤ –ø–æ –±–∏–∑–Ω–µ—Å—É (–≤–∫–ª—é—á–∞—è –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏)
@app.route('/api/business-history/<int:business_id>')
def get_business_history(business_id):
    try:
        snapshots = await_db(async_db.get_business_history(business_id, limit=120))
        data = prepare_multi_metric_data(snapshots)
        latest = snapshots[-1] if snapshots else None
        return jsonify({'success': True, 'data': data, 'latest': latest})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

# –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π endpoint –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è)
@app.route('/api/fullscreen-chart/<int:business_id>')
def get_fullscreen_chart(business_id):
    try:
        snapshots = await_db(async_db.get_business_history(business_id, limit=180))
        data = prepare_multi_metric_data(snapshots)
        return jsonify({'success': True, 'data': data})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

# API endpoint –¥–ª—è KPI –º–µ—Ç—Ä–∏–∫ –ø–æ –±–∏–∑–Ω–µ—Å—É (–Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–π —Å—Ö–µ–º—ã)
@app.route('/api/business-kpi/<int:business_id>')
def get_business_kpi(business_id):
    try:
        snapshots = await_db(async_db.get_business_history(business_id, limit=2))
        if not snapshots:
            return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}), 404
        latest = snapshots[0]
        previous = snapshots[1] if len(snapshots) > 1 else None
        def calc_change(curr, prev):
            prev = float(prev or 0)
            curr = float(curr or 0)
            if prev > 0:
                return round(((curr - prev) / prev) * 100, 1)
            return 0
        kpi = {
            'revenue': {'current': float(latest.get('revenue') or 0), 'change': calc_change(latest.get('revenue'), previous.get('revenue') if previous else 0)},
            'expenses': {'current': float(latest.get('expenses') or 0), 'change': calc_change(latest.get('expenses'), previous.get('expenses') if previous else 0)},
            'profit': {'current': float(latest.get('profit') or 0), 'change': calc_change(latest.get('profit'), previous.get('profit') if previous else 0)},
            'clients': {'current': int(latest.get('clients') or 0), 'change': calc_change(latest.get('clients'), previous.get('clients') if previous else 0)},
            'average_check': float(latest.get('average_check') or 0),
            'overall_health_score': int(latest.get('overall_health_score') or 0)
        }
        return jsonify({'success': True, 'kpi': kpi})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

# API endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –ò–ò (–æ—Å—Ç–∞–≤–ª—è–µ–º, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –ë–î –ø–æ –ø–µ—Ä–≤–æ–º—É –±–∏–∑–Ω–µ—Å—É)
@app.route('/api/user-ai-analysis/<user_id>')
def get_user_ai_analysis(user_id):
    try:
        businesses = await_db(async_db.get_user_businesses(user_id))
        if not businesses:
            return jsonify({
                'success': False,
                'error': '–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å —Å –¥–∞–Ω–Ω—ã–º–∏.'
            }), 404
        business_id = businesses[0]['business_id']
        snapshots = await_db(async_db.get_business_history(business_id, limit=12))
        if not snapshots:
            return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}), 404
        latest = snapshots[0]
        analysis_data = generate_ai_analysis(latest, snapshots)
        
        return jsonify({
            'success': True,
            'analysis': analysis_data
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# API endpoint –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç –ò–ò –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–∏–∑–Ω–µ—Å—É
@app.route('/api/business-ai-analysis/<int:business_id>')
def get_business_ai_analysis(business_id):
    try:
        snapshots = await_db(async_db.get_business_history(business_id, limit=12))
        
        if not snapshots:
            return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏'}), 404
        
        latest = snapshots[0]
        analysis_data = generate_ai_analysis(latest, snapshots)
        
        return jsonify({
            'success': True,
            'analysis': analysis_data
        })
        
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# API endpoint –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—á–∏—Ç–∞–µ–º –∏–∑ –Ω–æ–≤–æ–π –ë–î)
@app.route('/api/users')
def get_users():
    try:
        users = await_db(async_db.get_all_users())
        return jsonify({'success': True, 'users': users})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)}), 500

# API endpoint –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –ø–æ –Ω–æ–≤–æ–π —Å—Ö–µ–º–µ)
@app.route('/api/system-stats')
def get_system_stats():
    try:
        stats = await_db(async_db.get_system_stats())
        return jsonify({'success': True, 'stats': stats})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e), 'stats': {'total_users': 0, 'total_analyses': 0, 'active_today': 0}}), 500

# API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤
@app.route('/api/advice')
def get_advice():
    try:
        advice = await_db(async_db.get_advice())
        return jsonify({'success': True, 'advice': advice})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e), 'advice': [
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ —Ä–∞–∑–¥–µ–ª–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏",
            "–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –¥–∏–Ω–∞–º–∏–∫—É –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤", 
            "–ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞",
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"
        ]}), 500

# API endpoint –¥–ª—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –±–∏–∑–Ω–µ—Å—É (–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–Ω–∏–º–∫–∞)
@app.route('/api/business-advice/<int:business_id>')
def get_business_advice(business_id):
    try:
        snapshots = await_db(async_db.get_business_history(business_id, limit=1))
        if not snapshots:
            return jsonify({'success': True, 'advice': []})
        latest = snapshots[0]
        advice = []
        for key in ['advice1','advice2','advice3','advice4']:
            val = latest.get(key)
            if val and str(val).strip():
                advice.append(str(val).strip())
        return jsonify({'success': True, 'advice': advice})
    except Exception as e:
        return jsonify({'success': False, 'error': str(e), 'advice': []}), 500

def generate_ai_analysis(latest_data, history_data):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î"""
    
    revenue = float(latest_data.get('revenue') or 0)
    expenses = float(latest_data.get('expenses') or 0)
    profit = float(latest_data.get('profit') or 0)
    clients = int(latest_data.get('clients') or 0)
    avg_check = float(latest_data.get('average_check') or 0)
    rating = int((latest_data.get('overall_health_score') or 0) / 10)
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
    profitability = (profit / revenue * 100) if revenue > 0 else 0
    if profitability > 20:
        profit_status = "–≤—ã—Å–æ–∫–æ–π"
    elif profitability > 10:
        profit_status = "—Å—Ä–µ–¥–Ω–µ–π"
    else:
        profit_status = "–Ω–∏–∑–∫–æ–π"
    
    # –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    efficiency_analysis = []
    if expenses > revenue * 0.7:
        efficiency_analysis.append("–í—ã—Å–æ–∫–∏–µ —Ä–∞—Å—Ö–æ–¥—ã —Ç—Ä–µ–±—É—é—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
    if avg_check < 1000:
        efficiency_analysis.append("–ù–∏–∑–∫–∏–π —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω")
    if clients < 10:
        efficiency_analysis.append("–ú–∞–ª–æ –∫–ª–∏–µ–Ω—Ç–æ–≤ - —É—Å–∏–ª—å—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []
    if profitability < 15:
        recommendations.append("–°–Ω–∏–∑–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã")
    if avg_check < 1500:
        recommendations.append("–í–Ω–µ–¥—Ä–∏—Ç—å up-sell —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    if len(history_data) > 1:
        previous = history_data[1]
        prev_revenue = float(previous.get('revenue') or 0)
        if prev_revenue > 0:
            growth = ((revenue - prev_revenue) / prev_revenue * 100)
            if growth < 5:
                recommendations.append("–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é —Ä–æ—Å—Ç–∞ –ø—Ä–æ–¥–∞–∂")
    
    return {
        'summary': f" –í–∞—à –±–∏–∑–Ω–µ—Å –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç {profit_status} —Ä–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å ({profitability:.1f}%). –í—ã—Ä—É—á–∫–∞: {revenue:,.0f} —Ä—É–±., –ü—Ä–∏–±—ã–ª—å: {profit:,.0f} —Ä—É–±.",
        'metrics': {
            'profitability': round(profitability, 1),
            'client_value': avg_check * clients if clients > 0 else 0,
            'efficiency_score': min(100, max(0, rating * 10 + profitability))
        },
        'trends': efficiency_analysis if efficiency_analysis else ["–ë–∏–∑–Ω–µ—Å —Å—Ç–∞–±–∏–ª–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"],
        'recommendations': recommendations if recommendations else ["–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é"],
        'rating': rating,
        'commentary': ''
    }

# –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
@app.route('/test-css')
@app.route('/debug-static')
def debug_static():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    return '''
    <!DOCTYPE html>
    <html>
    <head>
        <title>Debug Static Files</title>
        <link rel="stylesheet" href="/static/style.css">
    </head>
    <body>
        <h1 style="color: white;">–¢–µ—Å—Ç —Ç–µ–º–Ω–æ–π —Ç–µ–º—ã</h1>
        <div class="kpi-card">
            <h3>–¢–µ—Å—Ç KPI –∫–∞—Ä—Ç–æ—á–∫–∏</h3>
            <div class="value">100,000 ‚ÇΩ</div>
        </div>
    </body>
    </html>
    '''

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@app.errorhandler(Exception)
def handle_exception(e):
    print(f"‚ùå –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
    print(f"‚ùå Traceback: {traceback.format_exc()}")
    return f"–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {str(e)}", 500

if __name__ == '__main__':
    import os
    port = int(os.environ.get('PORT', 5000))
    print(f"üåê Flask –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    app.run(debug=True, host='0.0.0.0', port=port)