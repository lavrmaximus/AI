import asyncio
from typing import Dict, List, Optional
from database import db
from business_analyzer import business_analyzer
from ai import extract_business_data, analyze_missing_data  # ‚Üê –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´
import logging

logger = logging.getLogger(__name__)

class BusinessConversation:
    """
    –£–º–Ω—ã–π –¥–∏–∞–ª–æ–≥–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –æ –±–∏–∑–Ω–µ—Å–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ
    """
    
    STATES = {
        'START': 'start',
        'AWAITING_BUSINESS_NAME': 'awaiting_business_name',
        'COLLECTING_DATA': 'collecting_data',  # ‚Üê –°–í–û–ë–û–î–ù–´–ô –í–í–û–î
        'READY_FOR_ANALYSIS': 'ready_for_analysis',
        'COMPLETED': 'completed'
    }
    
    # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    REQUIRED_FIELDS = ['revenue', 'expenses', 'clients']
    OPTIONAL_FIELDS = ['investments', 'marketing_costs']
    
    def __init__(self, session_id: int = None):
        self.session_id = session_id
        self.current_state = self.STATES['START']
        self.collected_data = {}
        self.business_id = None
        self.user_id = None
    
    async def get_conversation(self, user_id: str) -> 'BusinessConversation':
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.active_sessions:
            conversation = BusinessConversation()
            await conversation.initialize(user_id) # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
            self.active_sessions[user_id] = conversation

        return self.active_sessions[user_id]

    def end_conversation(self, user_id: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        if user_id in self.active_sessions:
            del self.active_sessions[user_id]

    async def initialize(self, user_id: str) -> int:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        self.user_id = user_id
        self.session_id = await db.create_conversation_session(
            user_id=user_id,
            business_id=None,
            initial_state=self.STATES['START']
        )
        return self.session_id
    
    async def load_session(self, session_id: int) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏"""
        session_data = await db.get_session(session_id)
        if not session_data:
            return False
            
        self.session_id = session_id
        self.current_state = session_data['current_state']
        self.collected_data = session_data['collected_data']
        self.business_id = session_data['business_id']
        self.user_id = session_data['user_id']
        return True
    
    async def process_message(self, user_message: str) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: {'response': str, 'next_action': str, 'is_complete': bool}
        """
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        await self._save_user_response(user_message)
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–∞–Ω–∞–ª–∏–∑–∞
        cancel_words = ['–≤—ã–π—Ç–∏', '–≤—ã—Ö–æ–¥', '–æ—Ç–º–µ–Ω–∞', 'cancel', 'exit', 'quit']
        if self.current_state in [self.STATES['COLLECTING_DATA'], self.STATES['READY_FOR_ANALYSIS']]:
            if user_message.strip().lower() in cancel_words:
                await self._update_state(self.STATES['COMPLETED'])
                return {
                    'response': "üö™ –í—ã –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è: /edit_business",
                    'next_action': 'cancelled',
                    'is_complete': True
                }

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if self.current_state == self.STATES['START']:
            return await self._handle_start()
        
        elif self.current_state == self.STATES['AWAITING_BUSINESS_NAME']:
            return await self._handle_business_name(user_message)
        
        elif self.current_state == self.STATES['COLLECTING_DATA']:
            return await self._handle_data_collection(user_message)

        elif self.current_state == self.STATES['READY_FOR_ANALYSIS']:
            return await self._handle_analysis(user_message)
        
        else:
            return await self._handle_unknown_state()
    
    async def _handle_start(self) -> Dict:
        """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å–∞"""
        await self._update_state(self.STATES['AWAITING_BUSINESS_NAME'])
        
        return {
            'response': "üëã –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –≤–∞—à –±–∏–∑–Ω–µ—Å.\n\n–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤–∞—à –±–∏–∑–Ω–µ—Å?",
            'next_action': 'await_business_name',
            'is_complete': False
        }
    
    async def _handle_business_name(self, business_name: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∏–∑–Ω–µ—Å–∞"""
        self.collected_data['business_name'] = business_name.strip()
        
        # –°–æ–∑–¥–∞–µ–º –±–∏–∑–Ω–µ—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.business_id = await db.create_business(
            user_id=self.user_id,
            name=business_name
        )
        
        await self._update_state(self.STATES['COLLECTING_DATA'])
        
        return {
            'response': f"üìù –ó–∞–ø–∏—Å–∞–ª: {business_name}\n\n"
                       "–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–º –±–∏–∑–Ω–µ—Å–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.\n\n"
                       "üí° *–ü—Ä–∏–º–µ—Ä:*\n"
                       "–ö–æ—Ñ–µ–π–Ω—è –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞, –≤—ã—Ä—É—á–∫–∞ 500–∫ –≤ –º–µ—Å—è—Ü, —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –∞—Ä–µ–Ω–¥—É –∏ –∑–∞—Ä–ø–ª–∞—Ç—ã 300–∫, "
                       "–ø—Ä–∏—Ö–æ–¥–∏—Ç –æ–∫–æ–ª–æ 1000 –∫–ª–∏–µ–Ω—Ç–æ–≤, —Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ 500 —Ä—É–±–ª–µ–π, "
                       "–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ 1 –º–ª–Ω —Ä—É–±–ª–µ–π –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ.",
            'next_action': 'collect_data',
            'is_complete': False
        }
    
    async def _handle_data_collection(self, user_message: str) -> Dict:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –æ –±–∏–∑–Ω–µ—Å–µ. –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏.
        """
        try:
            # –ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–∏—à–µ—Ç "–¥–∞/–≥–æ—Ç–æ–≤–æ" –∏ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ –µ—Å—Ç—å ‚Äî –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Ä–∞–∑—É
            if user_message.strip().lower() in ['–¥–∞', 'yes', '–≥–æ—Ç–æ–≤–æ', '–≥–æ—Ç–æ–≤'] and self._has_required_data():
                return await self._handle_analysis('–¥–∞')

            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å –ø–æ–º–æ—â—å—é AI
            extracted_data = await extract_business_data(user_message)
            logger.info(f"üîç –ò–∑–≤–ª–µ—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {extracted_data}")

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —É–∂–µ —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—è, –∞ –¥–æ–ø–æ–ª–Ω—è—è
            for key, value in extracted_data.items():
                if value is not None:  # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º None
                    # –ï—Å–ª–∏ –ø–æ–ª–µ —É–∂–µ –µ—Å—Ç—å –∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ != 0 –∏–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Å—Ç—Ä–æ–∫–∞
                    # –ê–ò –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 0 –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–µ–ª. –ï—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ —á–∏—Å–ª–æ–≤—ã–º, –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ.
                    if key in self.collected_data and self.collected_data[key] is not None and value == 0:
                        continue
                    self.collected_data[key] = value

            # –û—Ç—Ä–∞—Å–ª—å –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –Ω–∞—á–∞–ª–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ –∫–∞–∫ —Å—Ç—Ä–æ–∫—É, –≥–¥–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ª–∏—á–∏–µ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ
            collected_data_for_ai_prompt = {}
            for field in self.REQUIRED_FIELDS + self.OPTIONAL_FIELDS:
                if field in self.collected_data and self.collected_data[field] is not None:
                    collected_data_for_ai_prompt[field] = f"–î–ê ({self.collected_data[field]})"
                else:
                    collected_data_for_ai_prompt[field] = "–ù–ï–¢"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–∫–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π —Å–æ–±—Ä–∞–Ω–æ
            required_fields_count = sum(1 for field in self.REQUIRED_FIELDS if field in self.collected_data and self.collected_data[field] is not None)
            
            # –ï—Å–ª–∏ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–±–æ—Ä—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö
            if required_fields_count == len(self.REQUIRED_FIELDS):
                missing_questions_text = await analyze_missing_data(self.collected_data) # –û—Ç–¥–∞–µ–º AI –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            else:
                # –ï—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö, —Ç–æ AI –¥–æ–ª–∂–µ–Ω —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –Ω–∏—Ö
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å, —á—Ç–æ–±—ã AI –Ω–µ –≤–∏–¥–µ–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ, –ø–æ–∫–∞ –Ω–µ —Å–æ–±–µ—Ä–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ
                temp_collected_data = {k: v for k, v in self.collected_data.items() if k in self.REQUIRED_FIELDS}
                missing_questions_text = await analyze_missing_data(temp_collected_data)


            if missing_questions_text.strip().upper() == "ENOUGH_DATA":
                await self._update_state(self.STATES['READY_FOR_ANALYSIS'])

                summary = self._get_data_summary()
                return {
                    'response': f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –£ –º–µ–Ω—è –µ—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.\n\n"
                                f"–ü–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n{summary}\n\n"
                                f"–í—Å–µ –≥–æ—Ç–æ–≤–æ! –ì–æ—Ç–æ–≤—ã –ø—Ä–æ–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑? (–î–∞/–ù–µ—Ç)\n\n"
                                f"–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—ã–π—Ç–∏'",
                    'next_action': 'await_analysis_confirm',
                    'is_complete': False
                }
            else:
                summary = self._get_data_summary()
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if self._has_required_data():
                    return {
                        'response': f"üìä –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã.\n–ü–æ–¥–≤–µ–¥–µ–º –∏—Ç–æ–≥:\n{summary}\n\n"
                                   f"ü§î –î–ª—è *—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ* –∞–Ω–∞–ª–∏–∑–∞ –Ω—É–∂–Ω–æ –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
                                   f"{missing_questions_text}\n\n"
                                   f"–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–î–∞', —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫).\n\n"
                                   f"–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—ã–π—Ç–∏'",
                        'next_action': 'collect_data',
                        'is_complete': False
                    }
                else:
                    return {
                        'response': f"üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n{summary}\n\n"
                                   f"ü§î –ú–Ω–µ –Ω—É–∂–Ω–æ –µ—â—ë –Ω–µ–º–Ω–æ–≥–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞:\n\n"
                                   f"{missing_questions_text}\n\n"
                                   f"–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ.\n\n"
                                   f"–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—ã–π—Ç–∏'",
                        'next_action': 'collect_data',
                        'is_complete': False
                    }

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {
                'response': "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.",
                'next_action': 'collect_data',
                'is_complete': False
            }


    def _get_data_summary(self) -> str:
        """–°–≤–æ–¥–∫–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É."""
        data = self.collected_data
        summary_lines = []

        field_names = {
            'business_name': 'üè¢ –ë–∏–∑–Ω–µ—Å',
            'revenue': 'üí∞ –í—ã—Ä—É—á–∫–∞',
            'expenses': 'üìä –†–∞—Å—Ö–æ–¥—ã',
            'profit': 'üìà –ü—Ä–∏–±—ã–ª—å',
            'clients': 'üë• –ö–ª–∏–µ–Ω—Ç—ã',
            'average_check': 'üí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫',
            'investments': 'üíº –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏',
            'marketing_costs': 'üì¢ –ú–∞—Ä–∫–µ—Ç–∏–Ω–≥',
            'employees': 'üßë‚Äçü§ù‚Äçüßë –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
            'monthly_costs': 'üí∏ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã',
            'new_clients_per_month': 'üÜï –ù–æ–≤—ã–µ –∫–ª–∏–µ–Ω—Ç—ã/–º–µ—Å',
            'customer_retention_rate': 'üîÑ –£–¥–µ—Ä–∂–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤'
        }

        for field in (self.REQUIRED_FIELDS + self.OPTIONAL_FIELDS):
            if field in data and data[field] is not None:
                name = field_names.get(field, field) # –ò—Å–ø–æ–ª—å–∑—É–µ–º —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ —Å–∞–º–æ –ø–æ–ª–µ
                val = data[field]
                if isinstance(val, (int, float)):
                    if field == 'customer_retention_rate':
                        summary_lines.append(f"*{name}*: {val:.1f}%")
                    elif field == 'business_name':
                        summary_lines.append(f"*{name}*: {val}")
                    elif field in ['clients', 'employees', 'new_clients_per_month']:
                        summary_lines.append(f"*{name}*: {val:,.0f}")
                    else: # –û—Å—Ç–∞–ª—å–Ω—ã–µ —á–∏—Å–ª–æ–≤—ã–µ (—Ä—É–±–ª–∏)
                         summary_lines.append(f"*{name}*: {val:,.0f} —Ä—É–±")
                else: # –ï—Å–ª–∏ –Ω–µ —á–∏—Å–ª–æ
                    summary_lines.append(f"*{name}*: {val}")
            else:
                name = field_names.get(field, field)
                summary_lines.append(f"*{name}*: _–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç_") # –ß–µ—Ç–∫–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

        if not summary_lines:
            return "–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."

        return "\n".join(summary_lines)


    async def _handle_analysis(self, user_response: str) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
        if user_response.lower() in ['–¥–∞', 'yes', '–∫–æ–Ω–µ—á–Ω–æ', '–ø—Ä–æ–≤–µ–¥–∏', '–∞–Ω–∞–ª–∏–∑', '–≥–æ—Ç–æ–≤', '–≥–æ—Ç–æ–≤–æ']:
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ business_analyzer
            analysis_result = await business_analyzer.analyze_business_data(
                self.collected_data, 
                self.user_id, 
                self.business_id
            )
            
            await self._update_state(self.STATES['COMPLETED'])
            
            return {
                'response': self._format_analysis_response(analysis_result),
                'next_action': 'analysis_complete',
                'is_complete': True,
                'analysis_data': analysis_result
            }
        else:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–±–æ—Ä—É –¥–∞–Ω–Ω—ã—Ö
            await self._update_state(self.STATES['COLLECTING_DATA'])
            summary = self._get_data_summary()
            missing_questions = await analyze_missing_data(self.collected_data)
            
            if missing_questions.strip().upper() == "ENOUGH_DATA":
                return {
                    'response': f"{summary}\n\n–î–æ–±–∞–≤—å—Ç–µ –ª—é–±—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–¥–∞' –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
                    'next_action': 'collect_data',
                    'is_complete': False
                }
            
            return {
                'response': f"üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:\n{summary}\n\nü§î –ß—Ç–æ –µ—â–µ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å:\n{missing_questions}",
                'next_action': 'collect_data',
                'is_complete': False
            }
    
    async def _handle_unknown_state(self) -> Dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        return {
            'response': "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ.",
            'next_action': 'restart',
            'is_complete': True
        }
    
    def _has_required_data(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return all(
            field in self.collected_data and 
            self.collected_data[field] is not None and 
            self.collected_data[field] > 0 
            for field in self.REQUIRED_FIELDS
        )
    
    
    def _format_analysis_response(self, analysis_result: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º"""
        if 'error' in analysis_result:
            return f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {analysis_result['error']}"
        
        health_score = analysis_result.get('health_score', 0)
        health_assessment = analysis_result.get('health_assessment', {})
        key_metrics = analysis_result.get('key_metrics', {})
        detailed_metrics = analysis_result.get('detailed_metrics', {})
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å Health Score
        emoji = health_assessment.get('emoji', '‚ö™')
        response = f"üè• *–ë–ò–ó–ù–ï–°-–ó–î–û–†–û–í–¨–ï: {health_score}/100* {emoji}\n\n"
        response += f"*{health_assessment.get('message', '')}*\n\n"
        
        # –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        response += "üí∞ *–ö–õ–Æ–ß–ï–í–´–ï –ú–ï–¢–†–ò–ö–ò:*\n"
        response += f"‚Ä¢ –†–µ–Ω—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—å: {key_metrics.get('profit_margin', 0):.1f}%\n"
        response += f"‚Ä¢ ROI: {key_metrics.get('roi', 0):.1f}%\n"
        response += f"‚Ä¢ LTV/CAC: {key_metrics.get('ltv_cac_ratio', 0):.2f}\n"
        response += f"‚Ä¢ –ó–∞–ø–∞—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏: {key_metrics.get('safety_margin', 0):.1f}%\n\n"

        # –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
        if detailed_metrics:
            response += "üìä *–í–°–ï –ú–ï–¢–†–ò–ö–ò:*\n"
            metric_lines = []
            def fmt(name, value):
                try:
                    if isinstance(value, (int, float)):
                        return f"{name}: {value:.2f}"
                    return f"{name}: {value}"
                except Exception:
                    return f"{name}: {value}"
            for k, v in detailed_metrics.items():
                if k in ['business_id','snapshot_id','period_type','period_date','created_at']:
                    continue
                metric_lines.append("‚Ä¢ " + fmt(k, v))
            response += "\n".join(metric_lines) + "\n\n"
        
        # AI –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if analysis_result.get('ai_commentary'):
            response += f"üí° *–ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô AI:*\n{analysis_result['ai_commentary']}\n\n"
        
        if analysis_result.get('ai_advice'):
            response += "üéØ *–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:*\n"
            for i, advice in enumerate(analysis_result['ai_advice'][:4], 1):
                response += f"{i}. {advice}\n"
            response += "\n"
        
        response += "‚úÖ *–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ 22 –º–µ—Ç—Ä–∏–∫–∏*\n"
        response += "üìä *–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /history –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏*"
        
        return response
    
    async def _save_user_response(self, response: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            await db.log_message(
                session_id=self.session_id,
                user_message=response,
                bot_response='',
                message_type='user_input'
            )
        except Exception:
            # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–º—ã—à–ª–µ–Ω–Ω–æ –º–æ–ª—á–∏—Ç, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –¥–∏–∞–ª–æ–≥
            return
    
    async def _update_state(self, new_state: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
        self.current_state = new_state
        if self.session_id:
            await db.update_session_state(
                self.session_id, 
                new_state, 
                self.collected_data
            )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
class ConversationManager:
    def __init__(self):
        self.active_sessions = {}  # user_id -> BusinessConversation
    
    async def get_conversation(self, user_id: str) -> 'BusinessConversation':
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.active_sessions:
            conversation = BusinessConversation()
            await conversation.initialize(user_id)
            self.active_sessions[user_id] = conversation
        
        return self.active_sessions[user_id]
    
    def end_conversation(self, user_id: str):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏"""
        if user_id in self.active_sessions:
            del self.active_sessions[user_id]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
conv_manager = ConversationManager()